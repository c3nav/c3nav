# Generated by Django 5.1.5 on 2025-04-08 16:49
from collections import defaultdict, Counter
from itertools import chain

from django.conf import settings
from django.db import migrations
from django.db.models.aggregates import Count, Max
from django.db.models.expressions import F
from django.utils import translation
from django.utils.text import slugify


def migrate_location_hierarchy(apps, model_name):
    LocationSlug = apps.get_model('mapdata', 'LocationSlug')
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    LocationGroup = apps.get_model('mapdata', 'LocationGroup')
    LocationGroupCategory = apps.get_model('mapdata', 'LocationGroupCategory')
    LocationAdjacency = apps.get_model('mapdata', 'LocationAdjacency')
    LocationRelation = apps.get_model('mapdata', 'LocationRelation')
    LocationRelationPath = apps.get_model('mapdata', 'LocationRelationPath')

    Report = apps.get_model('mapdata', 'Report')
    ThemeLocationGroupBackgroundColor = apps.get_model('mapdata', 'ThemeLocationGroupBackgroundColor')

    tmp_category = LocationGroupCategory.objects.create(
        titles={"en": "Tmp Category"},
        priority=-1000,
    )

    max_id = max(
        LocationGroup.objects.aggregate(max_pk=Max("pk", default=0))["max_pk"],
        SpecificLocation.objects.aggregate(max_pk=Max("pk", default=0))["max_pk"],
    )
    new_location_groups = tuple(group.pk for group in LocationGroup.objects.bulk_create((
        LocationGroup(
            id=max_id+i+1,
            titles={"en": title},
            can_search=False,
            can_describe=True,
            priority=-1000,
            category=tmp_category,
        )
        for i, title in enumerate(("Level", "Space", "Area", "POI", "Dynamic Location"))
    )))

    for specific_location in SpecificLocation.objects.prefetch_related("levels", "spaces", "areas", "pois",
                                                                       "dynamic_location_targets"):
        for group, name in zip(new_location_groups, ("levels", "spaces", "areas", "pois", "dynamic_location_targets")):
            if getattr(specific_location, name).all():
                specific_location.groups.add(group)

    # convert locationgroups into specific locations
    fields = {f.attname for f in LocationGroup._meta.get_fields()
              if (not f.is_relation and not f.name.startswith("cached_")
                  and not f.name.startswith("effective_") and not f.name == "category")}
    SpecificLocation.objects.bulk_create([
        SpecificLocation(**{field_name: getattr(group, field_name) for field_name in fields})
        for group in LocationGroup.objects.all()
    ])

    # reset auto increment sequences
    from django.db import connection
    from django.core.management.color import no_style
    sequence_sql = connection.ops.sequence_reset_sql(no_style(), [SpecificLocation])
    with connection.cursor() as cursor:
        for line in sequence_sql:
            cursor.execute(line)

    # add specific locations to former groups
    for specific_location in SpecificLocation.objects.prefetch_related("groups"):
        specific_location.parents.set([group.id for group in specific_location.groups.all()])

    # move slugs over
    LocationSlug.objects.filter(group_id__isnull=False).update(specific_id=F("group_id"), group_id=None)

    # convert location group categories into specific locations
    categories = list(LocationGroupCategory.objects.prefetch_related("groups"))
    new_categories = [
        SpecificLocation(
            pk=None,
            titles=category.titles,
            can_search=False,
            can_describe=False,
            descriptions=category.help_texts,
            priority=category.priority,
        )
        for i, category in enumerate(categories, start=SpecificLocation.objects.order_by("-pk").first().pk+1)
    ]
    new_categories = SpecificLocation.objects.bulk_create(new_categories)

    # add former locationgroups to former location group categories
    for category, specific_location in zip(categories, new_categories):
        specific_location.children.set([group.id for group in category.groups.all()])

    # migrate report created_groups to created_parents
    for report in Report.objects.prefetch_related("created_groups"):
        report.created_parents.set([group.id for group in report.created_groups.all()])

    # migrate theme location group back ground color
    ThemeLocationGroupBackgroundColor.objects.update(location_id=F("location_group_id"))

    # create relation
    category_lookup = {category.id: new_category.id for category, new_category in zip(categories, new_categories)}
    direct_relations: set[tuple[int, int]] = set()
    indirect_relations: dict[tuple[int, int], set[int]] = defaultdict(set)
    for group in LocationGroup.objects.prefetch_related("specific_locations"):
        new_category_id = category_lookup[group.category_id]
        direct_relations.add((new_category_id, group.id))
        for specific_location in group.specific_locations.all():
            indirect_relations[(new_category_id, specific_location.id)].add(group.id)
            direct_relations.add((group.id, specific_location.id))
    adjacency_id_lookup = {(parent, child): pk
                           for pk, parent, child in LocationAdjacency.objects.values_list("pk", "parent_id", "child_id")}
    relations_to_create = (*direct_relations, *indirect_relations.keys())
    relation_id_lookup = {
        (relation.ancestor_id, relation.descendant_id): relation.id
        for relation in LocationRelation.objects.bulk_create((
            LocationRelation(ancestor_id=ancestor, descendant_id=descendant)
            for ancestor, descendant in relations_to_create
        ))
    }

    direct_relation_path_id_lookup = {
        path.relation_id: path.id
        for path in LocationRelationPath.objects.bulk_create((
            LocationRelationPath(
                prev_path=None,
                adjacency_id=adjacency_id_lookup[(ancestor_id, descendant_id)],
                relation_id=relation_id,
                num_hops=0,
            ) for (ancestor_id, descendant_id), relation_id in tuple(relation_id_lookup.items())[:len(direct_relations)]
        ))
    }
    LocationRelationPath.objects.bulk_create(chain.from_iterable((
        (
            LocationRelationPath(
                prev_path_id=direct_relation_path_id_lookup[relation_id_lookup[(intermediate_id, descendant_id)]],
                adjacency_id=adjacency_id_lookup[(intermediate_id, descendant_id)],
                relation_id=relation_id_lookup[(ancestor_id, descendant_id)],
                num_hops=1,
            ) for intermediate_id in intermediate_ids
        )
        for (ancestor_id, descendant_id), intermediate_ids in indirect_relations.items()
    )))

    Area = apps.get_model('mapdata', 'Area')
    Space = apps.get_model('mapdata', 'Space')
    for target in chain(
        Area.objects.filter(load_group_contribute__isnull=False).prefetch_related("locations"),
        Space.objects.filter(load_group_contribute__isnull=False).prefetch_related("locations"),
    ):
        for location in target.locations.all():
            location.load_group_contribute_id = target.load_group_contribute_id
            location.save()

    if settings.RANDOM_LOCATION_GROUPS:
        SpecificLocation.filter(pk__in=settings.RANDOM_LOCATION_GROUPS).update(
            include_in_random_location=True
        )

    for specific_location in SpecificLocation.objects.prefetch_related("levels", "spaces", "areas", "pois"):
        for target in chain(specific_location.levels.all(),
                            specific_location.spaces.all(),
                            specific_location.areas.all(),
                            specific_location.pois.all()):
            target.import_block = specific_location.import_block_geom

    to_delete = SpecificLocation.objects.get(pk=category_lookup[tmp_category.id])
    to_delete.children.clear()
    to_delete.calculated_descendants.clear()
    to_delete.delete()




def unmigrate_location_hierarchy(apps, model_name):
    LocationSlug = apps.get_model('mapdata', 'LocationSlug')
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    LocationGroup = apps.get_model('mapdata', 'LocationGroup')
    LocationGroupCategory = apps.get_model('mapdata', 'LocationGroupCategory')
    LocationAdjacency = apps.get_model('mapdata', 'LocationAdjacency')

    Report = apps.get_model('mapdata', 'Report')
    ThemeLocationGroupBackgroundColor = apps.get_model('mapdata', 'ThemeLocationGroupBackgroundColor')

    for specific_location in SpecificLocation.objects.prefetch_related("spaces", "areas", "pois"):
        for target in chain(specific_location.spaces.all(),
                            specific_location.areas.all(),
                            specific_location.pois.all()):
            specific_location.import_block_geom = target.import_block

    # locations with targets, these are former specific locations
    specific_location_ids = tuple(SpecificLocation.objects.annotate(
        num_levels=Count("levels"),
        num_spaces=Count("spaces"),
        num_areas=Count("areas"),
        num_pois=Count("pois"),
        num_dynamic_location_targets=Count("dynamic_location_targets"),
    ).exclude(
        num_levels=0, num_spaces=0, num_areas=0, num_pois=0, num_dynamic_location_targets=0
    ).values_list("pk", flat=True))

    # locations with parents that are no specific locations, those are former locationgroups

    former_group_locations = tuple(SpecificLocation.objects.filter(
        pk__in=LocationAdjacency.objects.exclude(child_id__in=specific_location_ids).values_list("child_id", flat=True)
    ))

    # parents of locationgroups are former locationgroupcategories
    former_categories = tuple(SpecificLocation.objects.filter(
        pk__in=LocationAdjacency.objects.filter(
            child_id__in=(l.pk for l in former_group_locations)
        ).values_list("parent_id", flat=True),
    ))

    # create location group categories again
    with translation.override("en"):
        categories = [
            LocationGroupCategory(
                name=slugify(former_category.title),
                titles=former_category.titles,
                titles_plural=former_category.titles,
                help_texts=former_category.descriptions,
                priority=former_category.priority,
                single=all((num == 1) for child_id, num in Counter(
                    LocationAdjacency.objects.filter(
                        parent_id__in=LocationAdjacency.objects.filter(
                            parent_id=former_category.id
                        ).values_list("child_id", flat=True)
                    ).values_list("child_id", flat=True)
                ).items()),
            )
            for former_category in former_categories
        ]
    categories = LocationGroupCategory.objects.bulk_create(categories)
    new_category_ids = {former_category.id: category.id
                        for former_category, category in zip(former_categories, categories)}
    available_category_ids = set(new_category_ids)

    # migrate report created_groups to created_parents
    for report in Report.objects.prefetch_related("created_parents"):
        report.created_groups.set([group.id for group in report.created_parents.all()])

    # migrate theme location group back ground color
    ThemeLocationGroupBackgroundColor.objects.update(location_group_id=F("location_id"))

    # create locationgroups again
    fields = {f.attname for f in LocationGroup._meta.get_fields()
              if (not f.is_relation and not f.name.startswith("cached_")
                  and not f.name.startswith("effective_") and not f.name == "category")}
    LocationGroup.objects.bulk_create([
        LocationGroup(
            category_id=new_category_ids[next(iter(
                set(LocationAdjacency.objects.filter(child_id=former_group.id).values_list("parent_id", flat=True))
                & available_category_ids
            ))],
            **{field_name: getattr(former_group, field_name) for field_name in fields}
        )
        for former_group in former_group_locations
    ])

    # move locationgroup slugs back
    LocationSlug.objects.filter(
        specific_id__in=LocationGroup.objects.values_list("pk", flat=True)
    ).update(group_id=F("specific_id"), specific_id=None)

    # add specific_locations to their location groups again
    location_group_ids = set(LocationGroup.objects.values_list("pk", flat=True))
    for specific_location in SpecificLocation.objects.all():
        specific_location.groups.set(LocationAdjacency.objects.filter(
            child_id=specific_location.pk, parent_id__in=location_group_ids
        ).values_list("parent_id", flat=True))

    # delete locations that are neither groups nor specific locations
    SpecificLocation.objects.exclude(pk__in=specific_location_ids).update(import_tag="DELETEDELETEDELETE")

    # last bit can be found in a separate data migration in 0154

    Area = apps.get_model('mapdata', 'Area')
    Space = apps.get_model('mapdata', 'Space')
    for target in chain(
            Area.objects.prefetch_related("locations"),
            Space.objects.prefetch_related("locations"),
    ):
        for location in target.locations.all():
            if location.load_group_contribute_id is not None:
                target.load_group_contribute_id = location.load_group_contribute_id
                location.load_group_contribute_id = None
            target.save()
            location.save()


class Migration(migrations.Migration):

    dependencies = [
        ('mapdata', '0154_new_location_hierarchy'),
    ]

    operations = [
        migrations.RunPython(migrate_location_hierarchy, unmigrate_location_hierarchy),
    ]
