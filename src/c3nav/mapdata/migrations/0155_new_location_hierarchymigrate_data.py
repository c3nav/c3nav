# Generated by Django 5.1.5 on 2025-04-08 16:49
from collections import defaultdict
from itertools import chain

from django.db import migrations
from django.db.models.expressions import F


def migrate_location_hierarchy(apps, model_name):
    LocationSlug = apps.get_model('mapdata', 'LocationSlug')
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    LocationGroup = apps.get_model('mapdata', 'LocationGroup')
    LocationGroupCategory = apps.get_model('mapdata', 'LocationGroupCategory')
    LocationParentage = apps.get_model('mapdata', 'LocationParentage')
    LocationAncestry = apps.get_model('mapdata', 'LocationAncestry')
    LocationAncestryPath = apps.get_model('mapdata', 'LocationAncestryPath')

    Report = apps.get_model('mapdata', 'Report')
    ThemeLocationGroupBackgroundColor = apps.get_model('mapdata', 'ThemeLocationGroupBackgroundColor')

    # convert locationgroups into specific locations
    fields = {f.attname for f in LocationGroup._meta.get_fields()
              if (not f.is_relation and not f.name.startswith("cached_")
                  and not f.name.startswith("effective_") and not f.name == "category")}
    SpecificLocation.objects.bulk_create([
        SpecificLocation(**{field_name: getattr(group, field_name) for field_name in fields})
        for group in LocationGroup.objects.all()
    ])

    # reset auto increment sequences
    from django.db import connection
    from django.core.management.color import no_style
    sequence_sql = connection.ops.sequence_reset_sql(no_style(), [SpecificLocation])
    with connection.cursor() as cursor:
        for line in sequence_sql:
            cursor.execute(line)

    # add specific locations to former groups
    for specific_location in SpecificLocation.objects.prefetch_related("groups"):
        specific_location.parents.set([group.id for group in specific_location.groups.all()])

    # move slugs over
    LocationSlug.objects.filter(group_id__isnull=False).update(specific_id=F("group_id"), group_id=None)

    # convert location group categories into specific locations
    categories = list(LocationGroupCategory.objects.prefetch_related("groups"))
    new_categories = [
        SpecificLocation(
            pk=None,
            titles=category.titles,
            can_search=False,
            can_describe=False,
            descriptions=category.help_texts,
            priority=category.priority,
        )
        for i, category in enumerate(categories, start=SpecificLocation.objects.order_by("-pk").first().pk+1)
    ]
    new_categories = SpecificLocation.objects.bulk_create(new_categories)

    # add former locationgroups to former location group categories
    for category, specific_location in zip(categories, new_categories):
        specific_location.children.set([group.id for group in category.groups.all()])

    # migrate report created_groups to created_parents
    for report in Report.objects.prefetch_related("created_groups"):
        report.created_parents.set([group.id for group in report.created_groups.all()])

    # migrate theme location group back ground color
    ThemeLocationGroupBackgroundColor.objects.update(location_id=F("location_group_id"))

    # create ancestry
    category_lookup = {category.id: new_category.id for category, new_category in zip(categories, new_categories)}
    direct_ancestry: set[tuple[int, int]] = set()
    indirect_ancestry: dict[tuple[int, int], set[int]] = defaultdict(set)
    for group in LocationGroup.objects.prefetch_related("specific_locations"):
        new_category_id = category_lookup[group.category_id]
        direct_ancestry.add((new_category_id, group.id))
        for specific_location in group.specific_locations.all():
            indirect_ancestry[(new_category_id, specific_location.id)].add(group.id)
            direct_ancestry.add((group.id, specific_location.id))
    parentage_id_lookup = {(parent, child): pk
                           for pk, parent, child in LocationParentage.objects.values_list("pk", "parent_id", "child_id")}
    ancestry_to_create = (*direct_ancestry, *indirect_ancestry.keys())
    ancestry_id_lookup = {
        (ancestry.ancestor_id, ancestry.descendant_id): ancestry.id
        for ancestry in LocationAncestry.objects.bulk_create((
            LocationAncestry(ancestor_id=ancestor, descendant_id=descendant)
            for ancestor, descendant in ancestry_to_create
        ))
    }

    direct_ancestry_path_id_lookup = {
        path.ancestry_id: path.id
        for path in LocationAncestryPath.objects.bulk_create((
            LocationAncestryPath(
                prev_path=None,
                parentage_id=parentage_id_lookup[(ancestor_id, descendant_id)],
                ancestry_id=ancestry_id,
                num_hops=0,
            ) for (ancestor_id, descendant_id), ancestry_id in tuple(ancestry_id_lookup.items())[:len(direct_ancestry)]
        ))
    }
    LocationAncestryPath.objects.bulk_create(chain.from_iterable((
        (
            LocationAncestryPath(
                prev_path=direct_ancestry_path_id_lookup[ancestry_id],
                parentage_id=parentage_id_lookup[(intermediate_id, descendant_id)],
                ancestry_id=ancestry_id,
                num_hops=1,
            ) for intermediate_id in intermediate_ids
        )
        for (ancestor_id, descendant_id), intermediate_ids, ancestry_id in (
            (key, intermediate_ids, ancestry_id_lookup[key])
            for key, intermediate_ids in indirect_ancestry.items()
        )
    )))

    Area = apps.get_model('mapdata', 'Area')
    Space = apps.get_model('mapdata', 'Space')
    for target in chain(
        Area.objects.filter(load_group_contribute__isnull=False).prefetch_related("locations"),
        Space.objects.filter(load_group_contribute__isnull=False).prefetch_related("locations"),
    ):
        for location in target.locations.all():
            location.load_group_contribute_id = target.load_group_contribute_id
            location.save()


def unmigrate_location_hierarchy(apps, model_name):
    LocationSlug = apps.get_model('mapdata', 'LocationSlug')
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    LocationGroup = apps.get_model('mapdata', 'LocationGroup')
    LocationGroupCategory = apps.get_model('mapdata', 'LocationGroupCategory')
    LocationParentage = apps.get_model('mapdata', 'LocationParentage')
    LocationAncestry = apps.get_model('mapdata', 'LocationAncestry')
    LocationAncestryPath = apps.get_model('mapdata', 'LocationAncestryPath')

    Report = apps.get_model('mapdata', 'Report')
    ThemeLocationGroupBackgroundColor = apps.get_model('mapdata', 'ThemeLocationGroupBackgroundColor')

    # locations with no parents / top level
    # these are either former categories or specificlocation without a group
    """top_level_location_ids = tuple(SpecificLocation.objects.annotate(
        num_parents=Count("parents"),
    ).filter(num_parents=0).values_list("pk", flat=True))

    # anything that belongs to a top level location must be a former locationgroup
    former_group_locationss = tuple(
        SpecificLocation.objects.filter(parents__in=top_level_location_ids).prefetch_related("parents")
    )

    # anything that has a former group location as a child is a former location group category
    former_categories = list(
        SpecificLocation.objects.filter(
            pk__in=top_level_location_ids, children_in=tuple(g.id for g in former_group_locationss)
        ).prefetch_related("children")
    )

    # create location group categories again
    with translation.override("en"):
        categories = [
            LocationGroupCategory(
                name=slugify(former_category.title),
                titles=former_category.titles,
                titles_plural=former_category.titles,
                help_texts=former_category.descriptions,
                prioriy=former_category.priority,
                single=(former_category.num_children == 1),
            )
            for former_category in former_categories
        ]
    categories = SpecificLocation.objects.bulk_create(categories)
    new_category_ids = {former_category.id: category.id
                        for former_category, category in zip(former_categories, categories)}
    available_category_ids = set(new_category_ids)"""

    # migrate report created_groups to created_parents
    for report in Report.objects.prefetch_related("created_parents"):
        report.created_groups.set([group.id for group in report.created_parents.all()])

    # migrate theme location group back ground color
    ThemeLocationGroupBackgroundColor.objects.update(location_group_id=F("location_id"))

    # delete specificlocations that are location group categories
    SpecificLocation.objects.filter(pk__in=LocationGroupCategory.objects.values_list("pk", flat=True)).delete()

    # create locationgroups again
    """
    fields = {f.attname for f in LocationGroup._meta.get_fields()
              if (not f.is_relation and not f.name.startswith("cached_")
                  and not f.name.startswith("effective_") and not f.name == "category")}
    LocationGroup.objects.bulk_create([
        LocationGroup(
            category_id=next(iter({p.id for p in former_group.parents.all()} & available_category_ids)),
            **{field_name: getattr(former_group, field_name) for field_name in fields}
        )
        for former_group in former_group_locationss
    ])"""

    # move locationgroup slugs back
    LocationSlug.objects.filter(
        specific_id__in=LocationGroup.objects.values_list("pk", flat=True)
    ).update(group_id=F("specific_id"), specific_id=None)

    # add specific_locations to their location groups again
    location_group_ids = set(LocationGroup.objects.values_list("pk", flat=True))
    for specific_location in SpecificLocation.objects.prefetch_related("parents"):
        specific_location.groups.set([group.id for group in specific_location.parents.all()
                                      if group.id in location_group_ids])

    # last bit can be found in a separate data migration in 0154

    Area = apps.get_model('mapdata', 'Area')
    Space = apps.get_model('mapdata', 'Space')
    for target in chain(
            Area.objects.prefetch_related("locations"),
            Space.objects.prefetch_related("locations"),
    ):
        for location in target.locations.all():
            if location.load_group_contribute_id is not None:
                target.load_group_contribute_id = location.load_group_contribute_id
                location.load_group_contribute_id = None
            target.save()
            location.save()


class Migration(migrations.Migration):

    dependencies = [
        ('mapdata', '0154_new_location_hierarchy'),
    ]

    operations = [
        migrations.RunPython(migrate_location_hierarchy, unmigrate_location_hierarchy),
    ]
