# Generated by Django 5.1.5 on 2025-04-08 16:49
from django.db import migrations
from django.db.models.expressions import F


def migrate_location_hierarchy(apps, model_name):
    LocationSlug = apps.get_model('mapdata', 'LocationSlug')
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    LocationGroup = apps.get_model('mapdata', 'LocationGroup')
    LocationGroupCategory = apps.get_model('mapdata', 'LocationGroupCategory')

    Report = apps.get_model('mapdata', 'Report')
    ThemeLocationGroupBackgroundColor = apps.get_model('mapdata', 'ThemeLocationGroupBackgroundColor')

    # convert locationgroups into specific locations
    fields = {f.attname for f in LocationGroup._meta.get_fields()
              if (not f.is_relation and not f.name.startswith("cached_")
                  and not f.name.startswith("effective_") and not f.name == "category")}
    SpecificLocation.objects.bulk_create([
        SpecificLocation(**{field_name: getattr(group, field_name) for field_name in fields})
        for group in LocationGroup.objects.all()
    ])

    # reset auto increment sequences
    from django.db import connection
    from django.core.management.color import no_style
    sequence_sql = connection.ops.sequence_reset_sql(no_style(), [SpecificLocation])
    with connection.cursor() as cursor:
        for line in sequence_sql:
            cursor.execute(line)

    # add specific locations to former groups
    for specific_location in SpecificLocation.objects.prefetch_related("groups"):
        specific_location.parents.set([group.id for group in specific_location.groups.all()])

    # move slugs over
    LocationSlug.objects.filter(group_id__isnull=False).update(specific_id=F("group_id"), group_id=None)

    # convert location group categories into specific locations
    categories = list(LocationGroupCategory.objects.prefetch_related("groups"))
    new_categories = [
        SpecificLocation(
            pk=None,
            titles=category.titles,
            can_search=False,
            can_describe=False,
            descriptions=category.help_texts,
            priority=category.priority,
        )
        for i, category in enumerate(categories, start=SpecificLocation.objects.order_by("-pk").first().pk+1)
    ]
    new_categories = SpecificLocation.objects.bulk_create(new_categories)

    # add former locationgroups to former location group categories
    for category, specific_location in zip(categories, new_categories):
        specific_location.children.set([group.id for group in category.groups.all()])

    # migrate report created_groups to created_parents
    for report in Report.objects.prefetch_related("created_groups"):
        report.created_parents.set([group.id for group in report.created_groups.all()])

    # migrate theme location group back ground color
    ThemeLocationGroupBackgroundColor.objects.update(location_id=F("location_group_id"))


def unmigrate_location_hierarchy(apps, model_name):
    LocationSlug = apps.get_model('mapdata', 'LocationSlug')
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    LocationGroup = apps.get_model('mapdata', 'LocationGroup')
    LocationGroupCategory = apps.get_model('mapdata', 'LocationGroupCategory')

    Report = apps.get_model('mapdata', 'Report')
    ThemeLocationGroupBackgroundColor = apps.get_model('mapdata', 'ThemeLocationGroupBackgroundColor')

    # locations with no parents / top level
    # these are either former categories or specificlocation without a group
    """top_level_location_ids = tuple(SpecificLocation.objects.annotate(
        num_parents=Count("parents"),
    ).filter(num_parents=0).values_list("pk", flat=True))

    # anything that belongs to a top level location must be a former locationgroup
    former_group_locationss = tuple(
        SpecificLocation.objects.filter(parents__in=top_level_location_ids).prefetch_related("parents")
    )

    # anything that has a former group location as a child is a former location group category
    former_categories = list(
        SpecificLocation.objects.filter(
            pk__in=top_level_location_ids, children_in=tuple(g.id for g in former_group_locationss)
        ).prefetch_related("children")
    )

    # create location group categories again
    with translation.override("en"):
        categories = [
            LocationGroupCategory(
                name=slugify(former_category.title),
                titles=former_category.titles,
                titles_plural=former_category.titles,
                help_texts=former_category.descriptions,
                prioriy=former_category.priority,
                single=(former_category.num_children == 1),
            )
            for former_category in former_categories
        ]
    categories = SpecificLocation.objects.bulk_create(categories)
    new_category_ids = {former_category.id: category.id
                        for former_category, category in zip(former_categories, categories)}
    available_category_ids = set(new_category_ids)"""

    # migrate report created_groups to created_parents
    for report in Report.objects.prefetch_related("created_parents"):
        report.created_groups.set([group.id for group in report.created_parents.all()])

    # migrate theme location group back ground color
    ThemeLocationGroupBackgroundColor.objects.update(location_group_id=F("location_id"))

    # delete specificlocations that are location group categories
    SpecificLocation.objects.filter(pk__in=LocationGroupCategory.objects.values_list("pk", flat=True)).delete()

    # create locationgroups again
    """
    fields = {f.attname for f in LocationGroup._meta.get_fields()
              if (not f.is_relation and not f.name.startswith("cached_")
                  and not f.name.startswith("effective_") and not f.name == "category")}
    LocationGroup.objects.bulk_create([
        LocationGroup(
            category_id=next(iter({p.id for p in former_group.parents.all()} & available_category_ids)),
            **{field_name: getattr(former_group, field_name) for field_name in fields}
        )
        for former_group in former_group_locationss
    ])"""

    # move locationgroup slugs back
    LocationSlug.objects.filter(
        specific_id__in=LocationGroup.objects.values_list("pk", flat=True)
    ).update(group_id=F("specific_id"), specific_id=None)

    # add specific_locations to their location groups again
    for specific_location in SpecificLocation.objects.prefetch_related("parents"):
        specific_location.groups.set([group.id for group in specific_location.parents.all()])

    # delete specificlocations that are locationgroups again
    SpecificLocation.objects.filter(pk__in=LocationGroup.objects.values_list("pk", flat=True)).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('mapdata', '0154_new_location_hierarchy'),
    ]

    operations = [
        migrations.RunPython(migrate_location_hierarchy, unmigrate_location_hierarchy),
    ]
