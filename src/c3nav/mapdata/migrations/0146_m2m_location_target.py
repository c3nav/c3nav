# Generated by Django 5.1.5 on 2025-01-30 13:36

from django.db import migrations, models
from shapely import contains, convex_hull

from c3nav.mapdata.utils.geometry import unwrap_geom


def make_location_target_m2m(apps, model_name):
    print("\n    ...", end='')
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    area_to_spaces = []
    for location in SpecificLocation.objects.select_related('area', 'area__space', 'area__space__location'):
        if location.level_id:
            location.levels.add(location.level_id)
        elif location.space_id:
            location.spaces.add(location.space_id)
        elif location.area_id:
            # if this location points to an area, and the area fully includes the space it is in,
            # point at the space and delete the area
            if contains(unwrap_geom(location.area.geometry).buffer(1), unwrap_geom(location.area.space.geometry)):
                print(f'Changing area location "{location.title}" '
                      f'to point at space "{location.area.space.location.title}" instead.\n    ...', end='')
                area_to_spaces.append([location, location.area.space])
                area = location.area
                location.area = None
                location.save()
                area.delete()
            else:
                location.areas.add(location.area_id)
        elif location.poi_id:
            location.pois.add(location.poi_id)
        elif location.dynamiclocation_id:
            location.dynamiclocations.add(location.dynamiclocation_id)
    for location, space in area_to_spaces:
        location.spaces.add(space)


def make_location_target_o2o(apps, model_name):
    print("\n    ...", end='')
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    Area = apps.get_model('mapdata', 'Area')
    locations = SpecificLocation.objects.prefetch_related("levels", "spaces", "areas", "pois", "dynamiclocations")
    for target_type in ("level", "space", "area", "poi", "dynamiclocation"):
        occupied = set()
        for location in locations:
            targets = tuple(getattr(location, f"{target_type}s").all())
            for i, target in enumerate(targets):
                if target.pk in occupied:
                    if target_type == "level":
                        raise ValueError(f'Location "{location.title}" reuses level.')
                    elif target_type == "space":
                        print(f'Location "{location.title}" reuses space, '
                              f'creating area to resolve conflict.\n    ...', end='')
                        set_target = Area.objects.create(
                            space=target,
                            geometry=convex_hull(unwrap_geom(target.geometry)).buffer(0.5, join_style="round",
                                                                                      quad_segs=1)
                        )
                    else:
                        print(f'Location "{location.title}" reuses {target_type}, '
                              f'cloning it to resolve conflict.\n    ...', end='')
                        set_target = target
                        set_target.pk = None
                        set_target.save()
                else:
                    set_target = target
                if i > 0:
                    print(f'Duplicating location "{location.title}" '
                          f'so it can point at {target_type} #{set_target.pk}.\n    ...', end='')
                    location.pk = None
                    location.save()
                setattr(location, set_target._meta.model_name.lower(), set_target)
                location.save()
                occupied.add(target.pk)


class Migration(migrations.Migration):

    dependencies = [
        ('mapdata', '0145_restructure_location_modeling_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='specificlocation',
            name='areas',
            field=models.ManyToManyField(related_name='tags', to='mapdata.area'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='dynamiclocations',
            field=models.ManyToManyField(related_name='tags', to='mapdata.dynamiclocation'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='levels',
            field=models.ManyToManyField(related_name='tags', to='mapdata.level'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='pois',
            field=models.ManyToManyField(related_name='tags', to='mapdata.poi'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='spaces',
            field=models.ManyToManyField(related_name='tags', to='mapdata.space'),
        ),
        migrations.RunPython(make_location_target_m2m, make_location_target_o2o),
        migrations.RemoveConstraint(
            model_name='specificlocation',
            name='only_one_specific_location_target',
        ),
        migrations.RemoveField(
            model_name='specificlocation',
            name='area',
        ),
        migrations.RemoveField(
            model_name='specificlocation',
            name='dynamiclocation',
        ),
        migrations.RemoveField(
            model_name='specificlocation',
            name='level',
        ),
        migrations.RemoveField(
            model_name='specificlocation',
            name='poi',
        ),
        migrations.RemoveField(
            model_name='specificlocation',
            name='space',
        ),
    ]
