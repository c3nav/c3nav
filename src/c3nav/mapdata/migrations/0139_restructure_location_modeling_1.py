# Generated by Django 5.1.5 on 2025-01-24 14:35

import re
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import c3nav.mapdata.fields
import c3nav.mapdata.models.locations


"""
Behold, a mostly hand-written migration – with commments! <3 We're getting rid of multi-model inheritance!
"""


def convert_specific_location(apps, model_name):
    OldModel = apps.get_model('mapdata', model_name+'_Old')
    NewModel = apps.get_model('mapdata', model_name)
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    LocationSlug = apps.get_model('mapdata', 'LocationSlug')
    locations = {}
    model_field_names = {field.name for field in NewModel._meta.get_fields()}
    for old_obj in OldModel.objects.prefetch_related("groups").all():
        values = {}
        location_values = {}
        for field in OldModel._meta.get_fields():
            if field.is_relation and field.auto_created:
                continue
            attname = field.attname
            (values if field.name in model_field_names else location_values)[attname] = getattr(old_obj, attname)
        location_values["id"] = values["id"]
        location_values["access_restriction_id"] = values["access_restriction_id"]
        location_values.pop("slug")
        groups = old_obj.groups.all()
        location_values.pop("groups")
        location_values.pop("group_id")
        location_values.pop("specific_id")
        location_values.pop("redirect")
        location_values[model_name.lower()+'_id'] = values["id"]

        NewModel.objects.create(**values)
        location = SpecificLocation.objects.create(**location_values)
        location.groups.set({group.id for group in groups})
        locations[old_obj.pk] = {'specific': location}
        LocationSlug.objects.filter(pk=old_obj.pk).update(specific=location)
    return locations


def migrate_locations(apps, schema_editor):
    locations = {}
    LocationGroup_Old = apps.get_model('mapdata', 'LocationGroup_Old')
    LocationGroup = apps.get_model('mapdata', 'LocationGroup')
    LocationSlug = apps.get_model('mapdata', 'LocationSlug')
    for old_obj in LocationGroup_Old.objects.all():
        values = {}
        for field in LocationGroup_Old._meta.get_fields():
            if field.is_relation and field.auto_created:
                continue
            attname = field.attname
            values[attname] = getattr(old_obj, attname)
        values.pop("slug")
        values.pop("group_id")
        values.pop("specific_id")
        values.pop("redirect")
        group = LocationGroup.objects.create(**values)
        locations[old_obj.pk] = {'group': group}
        LocationSlug.objects.filter(pk=old_obj.pk).update(group=group)

    locations.update(convert_specific_location(apps, 'level'))
    locations.update(convert_specific_location(apps, 'space'))
    locations.update(convert_specific_location(apps, 'area'))
    locations.update(convert_specific_location(apps, 'poi'))
    locations.update(convert_specific_location(apps, 'dynamiclocation'))

    LocationRedirect = apps.get_model('mapdata', 'LocationRedirect')
    for old_obj in LocationRedirect.objects.all():
        LocationSlug.objects.filter(pk=old_obj.pk).update(**locations[old_obj.target_id], redirect=True)


def unmigrate_locations(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('control', '0021_prepare_userpermissions_restructured_locations'),
        ('mapdata', '0138_rangingbeacon_max_observed_num_clients_and_more'),
    ]

    operations = [
        # remove db indexes, otherwise we get issues later
        migrations.AlterField(
            model_name='locationgroup',
            name='hierarchy',
            field=models.IntegerField(default=0, verbose_name='hierarchy'),
        ),
        migrations.AlterField(
            model_name='locationgroup',
            name='priority',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='locationgroup',
            name='hub_import_type',
            field=models.CharField(blank=True, help_text='assign this group to imported hub locations of this type', max_length=100, null=True, verbose_name='hub import type'),
        ),

        # move models, before we recreate them
        migrations.RenameModel(
            old_name='Level',
            new_name='Level_Old',
        ),
        migrations.RenameModel(
            old_name='Space',
            new_name='Space_Old',
        ),
        migrations.RenameModel(
            old_name='Area',
            new_name='Area_Old',
        ),
        migrations.RenameModel(
            old_name='POI',
            new_name='POI_Old',
        ),
        migrations.RenameModel(
            old_name='DynamicLocation',
            new_name='DynamicLocation_Old',
        ),
        migrations.RenameModel(
            old_name='LocationGroup',
            new_name='LocationGroup_Old',
        ),

        # recreate models
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_altitude', models.DecimalField(decimal_places=2, max_digits=6, unique=True, verbose_name='base altitude')),
                ('default_height', models.DecimalField(decimal_places=2, default=3.0, max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='default space height')),
                ('door_height', models.DecimalField(decimal_places=2, default=2.0, max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='door height')),
                ('intermediate', models.BooleanField(default=False, verbose_name='intermediate level')),
                ('short_label', models.CharField(help_text='used for the level selector', max_length=20, unique=True, verbose_name='short label')),
                ('level_index', models.CharField(help_text='used for coordinates', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9._]+\\Z'), 'Enter a valid “level index” consisting of letters, numbers, underscores, dots or hyphens.', 'invalid')], verbose_name='level index')),
                ('on_top_of', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='levels_on_top', to='mapdata.level', verbose_name='on top of')),
                ('access_restriction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.accessrestriction', verbose_name='Access Restriction')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
                'ordering': ['base_altitude'],
                'default_related_name': 'levels',
            },
        ),
        migrations.CreateModel(
            name='Space',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_tag', models.CharField(blank=True, max_length=64, null=True, verbose_name='import tag')),
                ('geometry', c3nav.mapdata.fields.GeometryField(default=None, geomtype='polygon', help_text=None)),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='height')),
                ('outside', models.BooleanField(default=False, verbose_name='only outside of building')),
                ('enter_description', c3nav.mapdata.fields.I18nField(blank=True, fallback_language=None, verbose_name='Enter description')),
                ('base_mapdata_accessible', models.BooleanField(default=False, verbose_name='always accessible (overwrites base mapdata setting)')),
                ('identifyable', models.BooleanField(default=None, help_text='if unknown, this will be a quest. if yes, quests for enter, leave or cross descriptions to this room will be generated.', null=True, verbose_name='easily identifyable/findable')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.level', verbose_name='level', db_index=False)),
                ('load_group_contribute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mapdata.loadgroup', verbose_name='contribute to load group', db_index=False)),
                ('access_restriction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.accessrestriction', verbose_name='Access Restriction', db_index=False)),
            ],
            options={
                'verbose_name': 'Space',
                'verbose_name_plural': 'Spaces',
                'default_related_name': 'spaces',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_tag', models.CharField(blank=True, max_length=64, null=True, verbose_name='import tag')),
                ('geometry', c3nav.mapdata.fields.GeometryField(default=None, geomtype='polygon', help_text=None)),
                ('slow_down_factor', models.DecimalField(decimal_places=2, default=1, help_text='values of overlapping areas get multiplied!', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='slow down factor')),
                ('main_point', c3nav.mapdata.fields.GeometryField(blank=True, default=None, geomtype='point', help_text='main routing point (optional)', null=True)),
                ('load_group_contribute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mapdata.loadgroup', verbose_name='contribute to load group', db_index=False)),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space', db_index=False)),
                ('access_restriction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.accessrestriction', verbose_name='Access Restriction', db_index=False)),
            ],
            options={
                'verbose_name': 'Area',
                'verbose_name_plural': 'Areas',
                'default_related_name': 'areas',
            },
        ),
        migrations.CreateModel(
            name='POI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_tag', models.CharField(blank=True, max_length=64, null=True, verbose_name='import tag')),
                ('geometry', c3nav.mapdata.fields.GeometryField(default=None, geomtype='point', help_text=None)),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space', db_index=False)),
                ('access_restriction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.accessrestriction', verbose_name='Access Restriction', db_index=False)),
            ],
            options={
                'verbose_name': 'Point of Interest',
                'verbose_name_plural': 'Points of Interest',
                'default_related_name': 'pois',
            },
        ),
        migrations.CreateModel(
            name='DynamicLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_secret', models.CharField(blank=True, max_length=32, null=True, verbose_name='position secret')),
                ('access_restriction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.accessrestriction', verbose_name='Access Restriction', db_index=False)),
            ],
            options={
                'verbose_name': 'Dynamic location',
                'verbose_name_plural': 'Dynamic locations',
                'default_related_name': 'dynamiclocations',
            },
        ),
        migrations.CreateModel(
            name='LocationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, fallback_value='{model} {pk}', plural_name='titles', verbose_name='Title')),
                ('can_search', models.BooleanField(default=True, verbose_name='can be searched')),
                ('can_describe', models.BooleanField(default=True, verbose_name='can describe')),
                ('icon', models.CharField(blank=True, help_text='any material icons name', max_length=32, null=True, verbose_name='icon')),
                ('external_url', models.URLField(blank=True, null=True, verbose_name='external URL')),
                ('priority', models.IntegerField(db_index=True, default=0)),
                ('hierarchy', models.IntegerField(db_index=True, default=0, verbose_name='hierarchy')),
                ('can_report_missing', models.CharField(choices=[('dont_offer', "don't offer"), ('reject', 'offer in first step, then reject'), ('single', 'offer in first step, exclusive choice'), ('multiple', 'offer if nothing in the first step matches, multiple choice')], default='dont_offer', max_length=16, verbose_name='report missing location')),
                ('can_report_mistake', models.CharField(choices=[('allow', 'allow'), ('reject', 'reject for all locations with this group')], default='allow', max_length=16, verbose_name='report mistakes')),
                ('description', c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, fallback_value='', help_text='to aid with selection in the report form', plural_name='descriptions', verbose_name='description')),
                ('report_help_text', c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, fallback_value='', help_text='to explain the report form or rejection', plural_name='report_help_texts', verbose_name='report help text')),
                ('color', models.CharField(blank=True, max_length=32, null=True, verbose_name='background color')),
                ('in_legend', models.BooleanField(default=False, verbose_name='show in legend (if color set)')),
                ('hub_import_type', models.CharField(blank=True, help_text='assign this group to imported hub locations of this type', max_length=100, null=True, unique=True, verbose_name='hub import type')),
                ('external_url_label', c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, fallback_value='', plural_name='external_url_labels', verbose_name='external URL label')),
                ('access_restriction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.accessrestriction', verbose_name='Access Restriction', db_index=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='groups', to='mapdata.locationgroupcategory', verbose_name='Category', db_index=False)),
                ('label_settings', models.ForeignKey(blank=True, help_text='unless location specifies otherwise', null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.labelsettings', verbose_name='label settings', db_index=False)),
                ('load_group_contribute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mapdata.loadgroup', verbose_name='contribute to load group', db_index=False)),
            ],
            options={
                'verbose_name': 'Location Group',
                'verbose_name_plural': 'Location Groups',
                'ordering': ('-category__priority', '-priority'),
                'default_related_name': 'locationgroups',
            },
        ),

        # this is the new – this model was abstract before!
        migrations.CreateModel(
            name='SpecificLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, fallback_value='{model} {pk}', plural_name='titles', verbose_name='Title')),
                ('can_search', models.BooleanField(default=True, verbose_name='can be searched')),
                ('can_describe', models.BooleanField(default=True, verbose_name='can describe')),
                ('icon', models.CharField(blank=True, help_text='any material icons name', max_length=32, null=True, verbose_name='icon')),
                ('external_url', models.URLField(blank=True, null=True, verbose_name='external URL')),
                ('label_override', c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, plural_name='label_overrides', verbose_name='Label override')),
                ('import_block_data', models.BooleanField(default=False, verbose_name="don't change metadata on import")),
                ('import_block_geom', models.BooleanField(default=False, verbose_name="don't change geometry on import")),
                ('access_restriction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.accessrestriction', verbose_name='Access Restriction')),
                ('area', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='mapdata.area')),
                ('dynamiclocation', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='mapdata.dynamiclocation')),
                ('groups', models.ManyToManyField(blank=True, to='mapdata.locationgroup', verbose_name='Location Groups')),
                ('label_settings', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='mapdata.labelsettings', verbose_name='label settings')),
                ('level', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='mapdata.level')),
                ('load_group_display', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mapdata.loadgroup', verbose_name='display load group')),
                ('poi', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='mapdata.poi')),
                ('space', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='mapdata.space')),
            ],
            options={
                'verbose_name': 'Specific Location',
                'verbose_name_plural': 'Specific Locations',
                'default_related_name': 'specific_locations',
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('area__isnull', True), ('dynamiclocation__isnull', True), ('level__isnull', False), ('poi__isnull', True), ('space__isnull', True)), models.Q(('area__isnull', True), ('dynamiclocation__isnull', True), ('level__isnull', True), ('poi__isnull', True), ('space__isnull', False)), models.Q(('area__isnull', False), ('dynamiclocation__isnull', True), ('level__isnull', True), ('poi__isnull', True), ('space__isnull', True)), models.Q(('area__isnull', True), ('dynamiclocation__isnull', True), ('level__isnull', True), ('poi__isnull', False), ('space__isnull', True)), models.Q(('area__isnull', True), ('dynamiclocation__isnull', False), ('level__isnull', True), ('poi__isnull', True), ('space__isnull', True)), _connector='OR'), name='only_one_specific_location_target')],
            },
        ),

        # LocationSlug becomes smarter, it needs to know what to refer to, and understand redirects
        migrations.AddField(
            model_name='locationslug',
            name='redirect',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='locationslug',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='slug_set', to='mapdata.locationgroup'),
        ),
        migrations.AddField(
            model_name='locationslug',
            name='specific',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='slug_set', to='mapdata.specificlocation'),
        ),

        # Time to copy the data over
        migrations.RunPython(migrate_locations),

        # Lots of auto-generated stuff coming up
        migrations.RemoveField(
            model_name='dynamiclocation_old',
            name='access_restriction',
        ),
        migrations.RemoveField(
            model_name='dynamiclocation_old',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='dynamiclocation_old',
            name='label_settings',
        ),
        migrations.RemoveField(
            model_name='dynamiclocation_old',
            name='load_group_display',
        ),
        migrations.RemoveField(
            model_name='dynamiclocation_old',
            name='locationslug_ptr',
        ),
        migrations.RemoveField(
            model_name='level_old',
            name='access_restriction',
        ),
        migrations.RemoveField(
            model_name='level_old',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='level_old',
            name='label_settings',
        ),
        migrations.RemoveField(
            model_name='level_old',
            name='load_group_display',
        ),
        migrations.RemoveField(
            model_name='level_old',
            name='locationslug_ptr',
        ),
        migrations.RemoveField(
            model_name='level_old',
            name='on_top_of',
        ),
        migrations.RemoveField(
            model_name='space_old',
            name='level',
        ),
        migrations.RemoveField(
            model_name='locationgroup_old',
            name='access_restriction',
        ),
        migrations.RemoveField(
            model_name='locationgroup_old',
            name='category',
        ),
        migrations.RemoveField(
            model_name='locationgroup_old',
            name='label_settings',
        ),
        migrations.RemoveField(
            model_name='locationgroup_old',
            name='load_group_contribute',
        ),
        migrations.RemoveField(
            model_name='locationgroup_old',
            name='locationslug_ptr',
        ),
        migrations.RemoveField(
            model_name='poi_old',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='space_old',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='poi_old',
            name='access_restriction',
        ),
        migrations.RemoveField(
            model_name='poi_old',
            name='label_settings',
        ),
        migrations.RemoveField(
            model_name='poi_old',
            name='load_group_display',
        ),
        migrations.RemoveField(
            model_name='poi_old',
            name='locationslug_ptr',
        ),
        migrations.RemoveField(
            model_name='poi_old',
            name='space',
        ),
        migrations.RemoveField(
            model_name='space_old',
            name='access_restriction',
        ),
        migrations.RemoveField(
            model_name='space_old',
            name='label_settings',
        ),
        migrations.RemoveField(
            model_name='space_old',
            name='load_group_contribute',
        ),
        migrations.RemoveField(
            model_name='space_old',
            name='load_group_display',
        ),
        migrations.RemoveField(
            model_name='space_old',
            name='locationslug_ptr',
        ),

        # Alright, time to move over all the references, cause they were moved to the _old models
        migrations.AlterField(
            model_name='altitudearea',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.level', verbose_name='level'),
        ),
        migrations.AlterField(
            model_name='building',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.level', verbose_name='level'),
        ),
        migrations.AlterField(
            model_name='dataoverlayfeature',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.level', verbose_name='level'),
        ),
        migrations.AlterField(
            model_name='door',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.level', verbose_name='level'),
        ),
        migrations.AlterField(
            model_name='report',
            name='created_groups',
            field=models.ManyToManyField(blank=True, help_text='select all groups that apply, if any', related_name='+', to='mapdata.locationgroup', verbose_name='location groups'),
        ),
        migrations.AlterField(
            model_name='themelocationgroupbackgroundcolor',
            name='location_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='theme_colors', to='mapdata.locationgroup'),
        ),
        migrations.AlterField(
            model_name='altitudemarker',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='beaconmeasurement',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='column',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='crossdescription',
            name='origin_space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leave_cross_descriptions', to='mapdata.space', verbose_name='origin space'),
        ),
        migrations.AlterField(
            model_name='crossdescription',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='crossdescription',
            name='target_space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cross_enter_descriptions', to='mapdata.space', verbose_name='target space'),
        ),
        migrations.AlterField(
            model_name='graphnode',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='hole',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='leavedescription',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='leavedescription',
            name='target_space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enter_descriptions', to='mapdata.space', verbose_name='target space'),
        ),
        migrations.AlterField(
            model_name='lineobstacle',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='obstacle',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='ramp',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='rangingbeacon',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),
        migrations.AlterField(
            model_name='stair',
            name='space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mapdata.space', verbose_name='space'),
        ),

        # delete some of the old models, not all of them because a migration in the control app needs to run first
        migrations.DeleteModel(
            name='Area_Old',
        ),
        migrations.DeleteModel(
            name='DynamicLocation_Old',
        ),
        migrations.DeleteModel(
            name='POI_Old',
        ),
        migrations.DeleteModel(
            name='Level_Old',
        ),
        migrations.DeleteModel(
            name='LocationRedirect',
        ),

        # all locationslugs point to a tagret now, so we might as well add a constraint
        migrations.AddConstraint(
            model_name='locationslug',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('group__isnull', False), ('specific__isnull', True)), models.Q(('group__isnull', True), ('specific__isnull', False)), _connector='OR'), name='only_one_slug_target'),
        ),
    ]
