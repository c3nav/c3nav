# Generated by Django 5.1.5 on 2025-04-08 16:49
import django.core.serializers.json
import django.db.models.functions.text
import django_pydantic_field.compat.django
import django_pydantic_field.fields
from django.db import migrations, models

import c3nav.mapdata.fields
import c3nav.mapdata.models.locations


def unmigrate_new_specific_locations(apps, model_name):
    SpecificLocation = apps.get_model('mapdata', 'SpecificLocation')
    LocationGroup = apps.get_model('mapdata', 'LocationGroup')

    # this needs to be here because https://code.djangoproject.com/ticket/36161
    SpecificLocation.objects.filter(pk__in=LocationGroup.objects.values_list("pk", flat=True)).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('mapdata', '0153_more_location_caching_and_dynamiclocation'),
    ]

    operations = [
        migrations.AlterField(
            model_name='mapupdatejob',
            name='job_type',
            field=models.CharField(choices=(('mapdata.evaluate_definedlocation_ancestry', 'evaluate location ancestry'), ('mapdata.recalculate_definedlocation_cached_from_parents', 'Defined location cached from parents'), ('mapdata.recalculate_definedlocation_static_targets', 'Defined location static targets'), ('mapdata.recalculate_definedlocation_dynamic_targets', 'Defined location dynamic targets'), ('mapdata.recalculate_definedlocation_target_subtitles', 'Defined location target subtitles'), ('mapdata.recalculate_definedlocation_minimum_access_restrictions', 'Defined location minimum access restrictions'), ('mapdata.recalculate_level_bounds', 'level bounds'), ('mapdata.recalculate_space_effective_geometries', 'Space effective geometries'), ('mapdata.recalculate_space_simplified_geometries', 'Space simplified geometries'), ('mapdata.recalculate_area_effective_geometries', 'Area effective geometries'), ('mapdata.recalculate_space_points', 'Space points'), ('mapdata.recalculate_area_points', 'Area points'), ('mapdata.recalculate_space_bounds', 'Space bounds'), ('mapdata.recalculate_area_bounds', 'Area bounds'), ('mapdata.recalculate_definedlocation_geometries', 'Defined location geometries'), ('mapdata.recalculate_definedlocation_bounds', 'Defined location bounds'), ('mapdata.recalculate_definedlocation_points', 'Defined location points'), ('mapdata.recalculate_definedlocation_final', 'Defined location finalize'), ('mapdata.recalculate_geometries', 'geometries'), ('routing.rebuild_router', 'router'), ('routing.rebuild_locator', 'locator')), db_index=True, max_length=64),
        ),
        migrations.RunPython(migrations.RunPython.noop, unmigrate_new_specific_locations),
        migrations.CreateModel(
            name='LocationParentage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='mapdata.specificlocation')),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mapdata.specificlocation')),
            ],
        ),
        migrations.CreateModel(
            name='LocationAncestry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ancestor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mapdata.specificlocation')),
                ('descendant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mapdata.specificlocation')),
            ],
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='can_report_missing',
            field=models.CharField(choices=[('dont_offer', "don't offer"), ('reject', 'offer in first step, then reject'), ('single', 'offer in first step, exclusive choice'), ('multiple', 'offer if nothing in the first step matches, multiple choice')], default='dont_offer', max_length=16, verbose_name='report missing location'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='can_report_mistake',
            field=models.CharField(choices=[('allow', 'allow'), ('reject', 'reject for all locations and sublocations')], default='allow', max_length=16, verbose_name='report mistakes'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='color',
            field=models.CharField(blank=True, max_length=32, null=True, verbose_name='background color'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='description',
            field=c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, fallback_value='', help_text='to aid with selection in the report form', plural_name='descriptions', verbose_name='description'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='external_url_label',
            field=c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, fallback_value='', plural_name='external_url_labels', verbose_name='external URL label'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='hierarchy',
            field=models.IntegerField(db_index=True, default=0, verbose_name='hierarchy'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='hub_import_type',
            field=models.CharField(blank=True, help_text='import hub locations of this type as children of this location', max_length=100, null=True, unique=True, verbose_name='hub import type'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='in_legend',
            field=models.BooleanField(default=False, verbose_name='show in legend (if color set)'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='load_group_contribute',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mapdata.loadgroup', verbose_name='contribute to load group'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='priority',
            field=models.IntegerField(db_index=True, default=0),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='report_help_text',
            field=c3nav.mapdata.fields.I18nField(blank=True, fallback_any=True, fallback_value='', help_text='to explain the report form or rejection', plural_name='report_help_texts', verbose_name='report help text'),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='parents',
            field=models.ManyToManyField(related_name='children', through='mapdata.LocationParentage', to='mapdata.specificlocation', through_fields=("child", "parent")),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='calculated_ancestors',
            field=models.ManyToManyField(editable=False, related_name='calculated_descendants', through='mapdata.LocationAncestry', to='mapdata.specificlocation', through_fields=("descendant", "ancestor")),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='effective_minimum_access_restrictions',
            field=django_pydantic_field.fields.PydanticSchemaField(config=None, default=frozenset, encoder=django.core.serializers.json.DjangoJSONEncoder, schema=django_pydantic_field.compat.django.GenericContainer(frozenset, (int,))),
        ),
        migrations.AddField(
            model_name='report',
            name='created_parents',
            field=models.ManyToManyField(blank=True, help_text='select all that apply, if any', related_name='+', to='mapdata.specificlocation', verbose_name='location type'),
        ),
        migrations.AddField(
            model_name='themelocationgroupbackgroundcolor',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='theme_colors', to='mapdata.specificlocation'),
        ),
        migrations.AlterField(
            model_name='themelocationgroupbackgroundcolor',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='mapdata.theme'),
        ),
        migrations.AddConstraint(
            model_name='locationancestry',
            constraint=models.UniqueConstraint(fields=('ancestor', 'descendant'), name='unique_location_ancestry'),
        ),
        migrations.AddConstraint(
            model_name='locationancestry',
            constraint=models.CheckConstraint(condition=models.Q(('ancestor', models.F('descendant')), _negated=True), name='no_circular_location_ancestry'),
        ),
        migrations.AddConstraint(
            model_name='locationparentage',
            constraint=models.UniqueConstraint(fields=('parent', 'child'), name='unique_location_parent_child'),
        ),
        migrations.AddConstraint(
            model_name='locationparentage',
            constraint=models.CheckConstraint(condition=models.Q(('parent', models.F('child')), _negated=True), name='location_parent_cant_be_child'),
        ),
        migrations.CreateModel(
            name='LocationAncestryPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_hops', models.PositiveSmallIntegerField()),
                ('ancestry', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='paths', to='mapdata.locationancestry')),
                ('parentage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mapdata.locationparentage')),
                ('prev_path', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mapdata.locationancestrypath')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('prev_path', 'parentage'), name='ancestry_path_unique_prev_path_parentage'), models.UniqueConstraint(fields=('prev_path', 'ancestry'), name='ancestry_path_unique_prev_path_ancestry'), models.CheckConstraint(condition=models.Q(models.Q(('num_hops', 0), ('prev_path__isnull', True)), models.Q(('num_hops__gt', 0), ('prev_path__isnull', False)), _connector='OR'), name='ancestry_path_enforce_num_hops')],
            },
        ),
        migrations.AlterModelOptions(
            name='specificlocation',
            options={'default_related_name': 'specific_locations', 'verbose_name': 'Specific Location', 'verbose_name_plural': 'Specific Locations'},
        ),
        migrations.RemoveField(
            model_name='specificlocation',
            name='effective_order',
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='effective_depth_first_order',
            field=models.PositiveIntegerField(default=2147483647, editable=False),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='effective_priority_order',
            field=models.PositiveIntegerField(default=2147483647, editable=False),
        ),
        migrations.AddField(
            model_name='specificlocation',
            name='effective_traversal_order',
            field=models.PositiveIntegerField(default=2147483647, editable=False),
        ),
    ]
