/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/auth/session/": {
    /** Get session API token */
    get: operations["c3nav_auth_session_token"];
  };
  "/api/v2/map/bounds/": {
    /** Get map boundaries */
    get: operations["c3nav_map_bounds"];
  };
  "/api/v2/map/locations/": {
    /** Get locations (with most important attributes) */
    get: operations["c3nav_map_location_list"];
  };
  "/api/v2/map/locations/full/": {
    /** Get locations (with all attributes) */
    get: operations["c3nav_map_location_list_full"];
  };
  "/api/v2/map/locations/{location_id}/": {
    /**
     * Get location by ID (with most important attributes)
     * @description a numeric ID for a map location or a string ID for generated locations can be used
     */
    get: operations["c3nav_map_location_by_id"];
  };
  "/api/v2/map/locations/{location_id}/full/": {
    /**
     * Get location by ID (with all attributes)
     * @description a numeric ID for a map location or a string ID for generated locations can be used
     */
    get: operations["c3nav_map_location_by_id_full"];
  };
  "/api/v2/map/locations/{location_id}/display/": {
    /**
     * Get location display data by ID
     * @description a numeric ID for a map location or a string ID for generated locations can be used
     */
    get: operations["c3nav_map_location_by_id_display"];
  };
  "/api/v2/map/locations/{location_id}/geometry/": {
    /**
     * Get location geometry (if available) by ID
     * @description a numeric ID for a map location or a string ID for generated locations can be used
     */
    get: operations["c3nav_map_location_by_id_geometry"];
  };
  "/api/v2/map/locations/by-slug/{location_slug}/": {
    /** Get location by slug (with most important attributes) */
    get: operations["c3nav_map_location_by_slug"];
  };
  "/api/v2/map/locations/by-slug/{location_slug}/full/": {
    /** Get location by slug (with all attributes) */
    get: operations["c3nav_map_location_by_slug_full"];
  };
  "/api/v2/map/locations/by-slug/{location_slug}/display/": {
    /** Get location display data by slug */
    get: operations["c3nav_map_location_by_slug_display"];
  };
  "/api/v2/map/locations/by-slug/{location_slug}/geometry/": {
    /** Get location geometry (if available) by slug */
    get: operations["c3nav_map_location_by_slug_geometry"];
  };
  "/api/v2/map/get_position/{position_id}/": {
    /** a numeric ID for a dynamic location or a string ID for the position secret can be used */
    get: operations["c3nav_map_get_current_position_by_id"];
  };
  "/api/v2/mapdata/levels/": {
    /** Get level list */
    get: operations["c3nav_mapdata_level_list"];
  };
  "/api/v2/mapdata/levels/{level_id}/": {
    /** Get level by ID */
    get: operations["c3nav_mapdata_level_by_id"];
  };
  "/api/v2/mapdata/buildings/": {
    /** Get building list */
    get: operations["c3nav_mapdata_building_list"];
  };
  "/api/v2/mapdata/buildings/{building_id}/": {
    /** Get building by ID */
    get: operations["c3nav_mapdata_building_by_id"];
  };
  "/api/v2/mapdata/spaces/": {
    /** Get space list */
    get: operations["c3nav_mapdata_space_list"];
  };
  "/api/v2/mapdata/space/{space_id}/": {
    /** Get space by ID */
    get: operations["c3nav_mapdata_space_by_id"];
  };
  "/api/v2/mapdata/doors/": {
    /** Get door list */
    get: operations["c3nav_mapdata_door_list"];
  };
  "/api/v2/mapdata/doors/{door_id}/": {
    /** Get door by ID */
    get: operations["c3nav_mapdata_door_by_id"];
  };
  "/api/v2/mapdata/holes/": {
    /** Get hole list */
    get: operations["c3nav_mapdata_hole_list"];
  };
  "/api/v2/mapdata/holes/{hole_id}/": {
    /** Get hole by ID */
    get: operations["c3nav_mapdata_hole_by_id"];
  };
  "/api/v2/mapdata/areas/": {
    /** Get area list */
    get: operations["c3nav_mapdata_area_list"];
  };
  "/api/v2/mapdata/areas/{area_id}/": {
    /** Get area by ID */
    get: operations["c3nav_mapdata_area_by_id"];
  };
  "/api/v2/mapdata/stairs/": {
    /** Get stair list */
    get: operations["c3nav_mapdata_stair_list"];
  };
  "/api/v2/mapdata/stairs/{stair_id}/": {
    /** Get stair by ID */
    get: operations["c3nav_mapdata_stair_by_id"];
  };
  "/api/v2/mapdata/ramps/": {
    /** Get ramp list */
    get: operations["c3nav_mapdata_ramp_list"];
  };
  "/api/v2/mapdata/ramps/{ramp_id}/": {
    /** Get ramp by ID */
    get: operations["c3nav_mapdata_ramp_by_id"];
  };
  "/api/v2/mapdata/obstacles/": {
    /** Get obstacle list */
    get: operations["c3nav_mapdata_obstacle_list"];
  };
  "/api/v2/mapdata/obstacles/{obstacle_id}/": {
    /** Get obstacle by ID */
    get: operations["c3nav_mapdata_obstacle_by_id"];
  };
  "/api/v2/mapdata/lineobstacles/": {
    /** Get line obstacle list */
    get: operations["c3nav_mapdata_lineobstacle_list"];
  };
  "/api/v2/mapdata/lineobstacles/{lineobstacle_id}/": {
    /** Get line obstacle by ID */
    get: operations["c3nav_mapdata_lineobstacle_by_id"];
  };
  "/api/v2/mapdata/columns/": {
    /** Get column list */
    get: operations["c3nav_mapdata_column_list"];
  };
  "/api/v2/mapdata/columns/{column_id}/": {
    /** Get column by ID */
    get: operations["c3nav_mapdata_column_by_id"];
  };
  "/api/v2/mapdata/pois/": {
    /** Get POI list */
    get: operations["c3nav_mapdata_poi_list"];
  };
  "/api/v2/mapdata/pois/{poi_id}/": {
    /** Get POI by ID */
    get: operations["c3nav_mapdata_poi_by_id"];
  };
  "/api/v2/mapdata/leavedescriptions/": {
    /** Get leave description list */
    get: operations["c3nav_mapdata_leavedescription_list"];
  };
  "/api/v2/mapdata/leavedescriptions/{leavedescription_id}/": {
    /** Get leave description by ID */
    get: operations["c3nav_mapdata_leavedescription_by_id"];
  };
  "/api/v2/mapdata/crossdescriptions/": {
    /** Get cross description list */
    get: operations["c3nav_mapdata_crossdescription_list"];
  };
  "/api/v2/mapdata/crossdescriptions/{crossdescription_id}/": {
    /** Get cross description by ID */
    get: operations["c3nav_mapdata_crossdescription_by_id"];
  };
  "/api/v2/mapdata/locationgroups/": {
    /** Get location group list */
    get: operations["c3nav_mapdata_locationgroup_list"];
  };
  "/api/v2/mapdata/locationgroups/{locationgroup_id}/": {
    /** Get location group by ID */
    get: operations["c3nav_mapdata_locationgroup_by_id"];
  };
  "/api/v2/mapdata/locationgroupcategories/": {
    /** Get location group category list */
    get: operations["c3nav_mapdata_locationgroupcategory_list"];
  };
  "/api/v2/mapdata/locationgroupcategories/{category_id}/": {
    /** Get location group category by ID */
    get: operations["c3nav_mapdata_locationgroupcategory_by_id"];
  };
  "/api/v2/mapdata/sources/": {
    /** Get source list */
    get: operations["c3nav_mapdata_source_list"];
  };
  "/api/v2/mapdata/sources/{source_id}/": {
    /** Get source by ID */
    get: operations["c3nav_mapdata_source_by_id"];
  };
  "/api/v2/mapdata/accessrestrictions/": {
    /** Get access restriction list */
    get: operations["c3nav_mapdata_accessrestriction_list"];
  };
  "/api/v2/mapdata/accessrestrictions/{accessrestriction_id}/": {
    /** Get access restriction by ID */
    get: operations["c3nav_mapdata_accessrestriction_by_id"];
  };
  "/api/v2/mapdata/accessrestrictiongroups/": {
    /** Get access restriction group list */
    get: operations["c3nav_mapdata_accessrestrictiongroup_list"];
  };
  "/api/v2/mapdata/accessrestrictiongroups/{group_id}/": {
    /** Get access restriction group by ID */
    get: operations["c3nav_mapdata_accessrestrictiongroups_by_id"];
  };
  "/api/v2/mapdata/dynamiclocations/": {
    /** Get dynamic location list */
    get: operations["c3nav_mapdata_dynamiclocation_list"];
  };
  "/api/v2/mapdata/dynamiclocations/{dynamiclocation_id}/": {
    /** Get dynamic location by ID */
    get: operations["c3nav_mapdata_dynamiclocation_by_id"];
  };
  "/api/v2/mesh/firmwares/": {
    /** List available firmwares */
    get: operations["c3nav_mesh_firmware_list"];
  };
  "/api/v2/mesh/firmwares/{firmware_id}/": {
    /** Get specific firmware */
    get: operations["c3nav_mesh_firmware_by_id"];
  };
  "/api/v2/mesh/firmwares/{firmware_id}/{variant}/image_data": {
    /** Get header data of firmware build image */
    get: operations["c3nav_mesh_firmware_build_image"];
  };
  "/api/v2/mesh/firmwares/{firmware_id}/{variant}/project_description": {
    /** Get project description of firmware build */
    get: operations["c3nav_mesh_firmware_project_description"];
  };
  "/api/v2/mesh/firmwares/upload": {
    /**
     * Upload firmware
     * @description your OpenAPI viewer might not show it: firmware_data is UploadFirmware as json
     */
    post: operations["c3nav_mesh_firmware_upload"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * APITokenSchema
     * @description An API token to be used with Bearer authentication
     */
    APIToken: {
      /** Token */
      token: string;
    };
    /**
     * BoundsSchema
     * @description Describing a bounding box
     */
    Bounds: {
      /**
       * Bounds
       * @description (x, y) to (x, y)
       * @example [
       *   [
       *     -10,
       *     -20
       *   ],
       *   [
       *     20,
       *     30
       *   ]
       * ]
       */
      bounds: [[number, number], [number, number]];
    };
    /**
     * APIErrorSchema
     * @description An error has occured with this request
     */
    APIError: {
      /**
       * Detail
       * @description A human-readable error description
       */
      detail: string;
    };
    /** LocationListFilters */
    LocationListFilters: {
      /**
       * include geometry
       * @description by default, geometry will be ommited. set to true to include it (if available)
       * @default false
       */
      geometry?: boolean;
      /**
       * searchable locations only
       * @description only show locations that should show up in search
       * @default false
       */
      searchable?: boolean;
    };
    /**
     * LabelSettingsSchema
     * @description Settings preset for how and when to display a label. Reusable between objects.
     * The title describes the title of this preset, not the displayed label.
     */
    LabelSettings: {
      /** ID */
      id: number;
      /**
       * min zoom
       * @default -10
       */
      min_zoom?: number;
      /**
       * max zoom
       * @default 10
       */
      max_zoom?: number;
      /** font size */
      font_size: number;
    };
    /**
     * PointSchema
     * @description A GeoJSON Point
     */
    Point: {
      /**
       * Type
       * @constant
       */
      type: "Point";
      /**
       * Coordinates
       * @example [
       *   1,
       *   2.5
       * ]
       */
      coordinates: [number, number];
    };
    /**
     * PolygonSchema
     * @description A GeoJSON Polygon
     */
    Polygon: {
      /**
       * Type
       * @constant
       */
      type: "Polygon";
      /**
       * Coordinates
       * @example [
       *   [
       *     [
       *       1.5,
       *       1.5
       *     ],
       *     [
       *       1.5,
       *       2.5
       *     ],
       *     [
       *       2.5,
       *       2.5
       *     ],
       *     [
       *       2.5,
       *       2.5
       *     ]
       *   ]
       * ]
       */
      coordinates: [number, number][][];
    };
    /**
     * SlimAreaLocationSchema
     * @description An area with some rarely needed fields removed and some additional information for the location API.
     * See Area schema for details.
     */
    SlimAreaLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
      /**
       * Bounds
       * @description location bounding box from (x, y) to (x, y)
       * @example [
       *   [
       *     -10,
       *     -20
       *   ],
       *   [
       *     20,
       *     30
       *   ]
       * ]
       */
      bounds: [[number, number], [number, number]];
      /**
       * point representation
       * @description representative point for the location
       * @example [
       *   1,
       *   4.2,
       *   13.37
       * ]
       */
      point: [number, number, number];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "area";
    };
    /**
     * SlimDynamicLocationLocationSchema
     * @description A dynamic location with some rarely needed fields removed for the location API.
     * See DynamicLocation schema for details.
     */
    SlimDynamicLocationLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * Locations
       * @description IDs of all locations that belong to this grouo
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      locations: number[];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "dynamiclocation";
    };
    /**
     * SlimLevelLocationSchema
     * @description A level for the location API with some rarely needed fields removed.
     * See Level schema for details.
     */
    SlimLevelLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * Locationtype
       * @constant
       */
      locationtype: "level";
    };
    /**
     * SlimLocationGroupLocationSchema
     * @description A location group with some rarely needed fields removed and some additional information for the location API.
     * See LocationGroup schema for details.
     */
    SlimLocationGroupLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /**
       * label settings
       * @description for locations with this group, can be overwritten by specific locations
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * Locations
       * @description IDs of all locations that belong to this grouo
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      locations: number[];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "locationgroup";
    };
    /**
     * SlimPOILocationSchema
     * @description A point of interest with some rarely needed fields removed and some additional information for the location API.
     * See POI schema for details.
     */
    SlimPOILocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Point"] | null;
      /**
       * Bounds
       * @description location bounding box from (x, y) to (x, y)
       * @example [
       *   [
       *     -10,
       *     -20
       *   ],
       *   [
       *     20,
       *     30
       *   ]
       * ]
       */
      bounds: [[number, number], [number, number]];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "poi";
    };
    /**
     * SlimSpaceLocationSchema
     * @description A space with some rarely needed fields removed and some additional information for the location API.
     * See Space schema for details.
     */
    SlimSpaceLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
      /**
       * Bounds
       * @description location bounding box from (x, y) to (x, y)
       * @example [
       *   [
       *     -10,
       *     -20
       *   ],
       *   [
       *     20,
       *     30
       *   ]
       * ]
       */
      bounds: [[number, number], [number, number]];
      /**
       * point representation
       * @description representative point for the location
       * @example [
       *   1,
       *   4.2,
       *   13.37
       * ]
       */
      point: [number, number, number];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "space";
    };
    /**
     * FullAreaLocationSchema
     * @description An area with some additional information for the location API.
     * See Area schema for details.
     */
    FullAreaLocation: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
      /**
       * slow-down factor
       * @description how much walking in this area is slowed down, overlapping areas are multiplied
       */
      slow_down_factor: number;
      /**
       * Bounds
       * @description location bounding box from (x, y) to (x, y)
       * @example [
       *   [
       *     -10,
       *     -20
       *   ],
       *   [
       *     20,
       *     30
       *   ]
       * ]
       */
      bounds: [[number, number], [number, number]];
      /**
       * point representation
       * @description representative point for the location
       * @example [
       *   1,
       *   4.2,
       *   13.37
       * ]
       */
      point: [number, number, number];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "area";
    };
    /**
     * FullDynamicLocationLocationSchema
     * @description A dynamic location for the location API.
     * See DynamicLocation schema for details.
     */
    FullDynamicLocationLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * Locations
       * @description IDs of all locations that belong to this grouo
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      locations: number[];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "dynamiclocation";
    };
    /**
     * FullLevelLocationSchema
     * @description A level for the location API.
     * See Level schema for details.
     */
    FullLevelLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * short label (for level selector)
       * @description unique among levels
       */
      short_label: string;
      /**
       * on top of level ID
       * @description if set, this is not a main level, but it's on top of this other level
       */
      on_top_of: number | null;
      /** base/default altitude */
      base_altitude: number;
      /** default ceiling height */
      default_height: number;
      /** door height */
      door_height: number;
      /**
       * Locationtype
       * @constant
       */
      locationtype: "level";
    };
    /**
     * FullLocationGroupLocationSchema
     * @description A location group with some additional information for the location API.
     * See LocationGroup schema for details.
     */
    FullLocationGroupLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * category
       * @description location group category that this location group belongs to
       */
      category: number;
      /** Priority */
      priority: number;
      /** Hierarchy */
      hierarchy: number;
      /**
       * label settings
       * @description for locations with this group, can be overwritten by specific locations
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * report missing locations
       * @description can be used in form for reporting missing locations
       */
      can_report_missing: boolean;
      /**
       * color
       * @description an optional color for spaces and areas with this group
       */
      color: string | null;
      /**
       * Locations
       * @description IDs of all locations that belong to this grouo
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      locations: number[];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "locationgroup";
    };
    /**
     * FullPOILocationSchema
     * @description A point of interest with some additional information for the location API.
     * See POI schema for details.
     */
    FullPOILocation: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Point"] | null;
      /**
       * Bounds
       * @description location bounding box from (x, y) to (x, y)
       * @example [
       *   [
       *     -10,
       *     -20
       *   ],
       *   [
       *     20,
       *     30
       *   ]
       * ]
       */
      bounds: [[number, number], [number, number]];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "poi";
    };
    /**
     * FullSpaceLocationSchema
     * @description A space with some additional information for the location API.
     * See Space schema for details.
     */
    FullSpaceLocation: {
      /** ID */
      id: number;
      /**
       * level
       * @description level id this object belongs to.
       */
      level: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
      /**
       * outside only
       * @description determines whether to truncate to buildings or to the outside of buildings
       */
      outside: boolean;
      /**
       * ceiling height
       * @description if not set, default height for this level will be used
       */
      height: number | null;
      /**
       * Bounds
       * @description location bounding box from (x, y) to (x, y)
       * @example [
       *   [
       *     -10,
       *     -20
       *   ],
       *   [
       *     20,
       *     30
       *   ]
       * ]
       */
      bounds: [[number, number], [number, number]];
      /**
       * point representation
       * @description representative point for the location
       * @example [
       *   1,
       *   4.2,
       *   13.37
       * ]
       */
      point: [number, number, number];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "space";
    };
    /** RemoveGeometryFilter */
    RemoveGeometryFilter: {
      /**
       * include geometry
       * @description by default, geometry will be ommited. set to true to include it (if available)
       * @default false
       */
      geometry?: boolean;
    };
    /** ShowRedirects */
    ShowRedirects: {
      /**
       * Show Redirects
       * @description whether to show redirects instead of sending a redirect response
       * @default false
       */
      show_redirects?: boolean;
    };
    /**
     * CustomLocationLocationSchema
     * @description A custom location for the location API.
     * See CustomLocation schema for details.
     */
    CustomLocationLocation: {
      /**
       * custom location ID
       * @description ID representing the coordinates
       */
      id: string;
      /**
       * custom location ID
       * @description slug, identical to ID
       */
      slug: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * Level
       * @description level ID this custom location is located on
       */
      level: number;
      /**
       * Space
       * @description space ID this custom location is located in, if applicable
       */
      space: number | null;
      /**
       * Areas
       * @description IDs of areas this custom location is located in
       */
      areas: number[];
      /**
       * grid square
       * @description if a grid is defined and this custom location is within it
       */
      grid_square?: string | null;
      /**
       * Near Area
       * @description the ID of an area near this custom location, if there is one
       */
      near_area: number | null;
      /**
       * Near Poi
       * @description the ID of a POI near this custom location, if there is one
       */
      near_poi: number | null;
      /**
       * Neaby
       * @description list of IDs of nearby locations
       */
      neaby: number[];
      /**
       * Altitude
       * @description ground altitude (in the map-wide coordinate system), if it can be determined
       */
      altitude: number | null;
      /** @description point geometry for this custom location */
      geometry: components["schemas"]["Point"] | null;
      /**
       * Bounds
       * @description location bounding box from (x, y) to (x, y)
       * @example [
       *   [
       *     -10,
       *     -20
       *   ],
       *   [
       *     20,
       *     30
       *   ]
       * ]
       */
      bounds: [[number, number], [number, number]];
      /**
       * point representation
       * @description representative point for the location
       * @example [
       *   1,
       *   4.2,
       *   13.37
       * ]
       */
      point: [number, number, number];
      /**
       * Locationtype
       * @constant
       */
      locationtype: "customlocation";
    };
    /**
     * TrackablePositionLocationSchema
     * @description A trackable position for the location API.
     * See TrackablePosition schema for details.
     */
    TrackablePositionLocation: {
      /**
       * position ID
       * @description ID representing the position
       */
      id: string;
      /**
       * position ID
       * @description slug representing the position
       */
      slug: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** title of the position */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description, which might change when the position changes. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * Locationtype
       * @constant
       */
      locationtype: "position";
    };
    /**
     * DisplayLink
     * @description A link for the location display
     */
    DisplayLink: {
      /** Id */
      id: number;
      /** Slug */
      slug: string;
      /** Title */
      title: string;
      /** Can Search */
      can_search: boolean;
    };
    /**
     * LineStringSchema
     * @description A GeoJSON LineString
     */
    LineString: {
      /**
       * Type
       * @constant
       */
      type: "LineString";
      /**
       * Coordinates
       * @example [
       *   [
       *     1.5,
       *     1.5
       *   ],
       *   [
       *     2.5,
       *     2.5
       *   ],
       *   [
       *     5,
       *     8.7
       *   ]
       * ]
       */
      coordinates: [number, number][];
    };
    /** LocationDisplay */
    LocationDisplay: {
      /**
       * Id
       * @description a numeric ID for a map location or a string ID for generated locations
       */
      id: number | string;
      /**
       * Level
       * @description level ID, if applicable
       */
      level?: number | null;
      /**
       * Space
       * @description space ID, if applicable
       */
      space?: number | null;
      /**
       * Display
       * @description a list of human-readable display values
       */
      display: ([string, string | components["schemas"]["DisplayLink"] | components["schemas"]["DisplayLink"][] | null])[];
      /**
       * Geometry
       * @description representative geometry, if available
       */
      geometry?: (components["schemas"]["Polygon"] | components["schemas"]["LineString"] | components["schemas"]["Point"]) | null;
      /**
       * Editor Url
       * @description path to edit this object in the editor, if the user has access to it
       */
      editor_url?: string | null;
    };
    /** LocationGeometry */
    LocationGeometry: {
      /**
       * Id
       * @description ID of the location that the geometry is being queried for
       */
      id: number;
      /**
       * Level
       * @description ID of the level the geometry is on
       */
      level: number | null;
      /**
       * Geometry
       * @description geometry, if available
       */
      geometry: (components["schemas"]["Polygon"] | components["schemas"]["LineString"] | components["schemas"]["Point"]) | null;
    };
    /** PositionAvailableStatusSchema */
    PositionAvailableStatus: {
      /**
       * Id
       * @description the ID of the dynamic position that has been queries
       */
      id: number | string;
      /**
       * Slug
       * @description a description for the dynamic position that has been queried
       */
      slug: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** title of the position */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description, which might change when the position changes. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * Level
       * @description level ID this custom location is located on
       */
      level: number;
      /**
       * Space
       * @description space ID this custom location is located in, if applicable
       */
      space: number | null;
      /**
       * Areas
       * @description IDs of areas this custom location is located in
       */
      areas: number[];
      /**
       * grid square
       * @description if a grid is defined and this custom location is within it
       */
      grid_square?: string | null;
      /**
       * Near Area
       * @description the ID of an area near this custom location, if there is one
       */
      near_area: number | null;
      /**
       * Near Poi
       * @description the ID of a POI near this custom location, if there is one
       */
      near_poi: number | null;
      /**
       * Neaby
       * @description list of IDs of nearby locations
       */
      neaby: number[];
      /**
       * Altitude
       * @description ground altitude (in the map-wide coordinate system), if it can be determined
       */
      altitude: number | null;
      /** @description point geometry for this custom location */
      geometry: components["schemas"]["Point"] | null;
      /**
       * Available
       * @constant
       */
      available: true;
    };
    /** PositionUnavailableStatusSchema */
    PositionUnavailableStatus: {
      /**
       * Id
       * @description the ID of the dynamic position that has been queries
       */
      id: number | string;
      /**
       * Slug
       * @description a description for the dynamic position that has been queried
       */
      slug: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** title of the position */
      title: string;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description, which might change when the position changes. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * Available
       * @constant
       */
      available: false;
    };
    /** Input */
    Input: {
      /**
       * Limit
       * @default 100
       */
      limit?: number;
      /**
       * Offset
       * @default 0
       */
      offset?: number;
    };
    /** LevelFilters */
    LevelFilters: {
      /**
       * filter by on top of level ID (or "null")
       * @description if set, only levels on top of the level with this ID (or "null" for no level) will be shown
       */
      on_top_of?: "null" | number | null;
      /**
       * filter by location group
       * @description if set, only items belonging to the location group with this ID will be shown
       */
      group?: number | null;
    };
    /**
     * LevelSchema
     * @description A physical level of the map, containing building, spaces, doors…
     *
     * A level is a specific location, and can therefore be routed to and from, as well as belong to location groups.
     */
    Level: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * short label (for level selector)
       * @description unique among levels
       */
      short_label: string;
      /**
       * on top of level ID
       * @description if set, this is not a main level, but it's on top of this other level
       */
      on_top_of: number | null;
      /** base/default altitude */
      base_altitude: number;
      /** default ceiling height */
      default_height: number;
      /** door height */
      door_height: number;
    };
    /** PagedLevelSchema */
    PagedLevel: {
      /** Items */
      items: components["schemas"]["Level"][];
      /** Count */
      count: number;
    };
    /** LevelGeometryFilter */
    LevelGeometryFilter: {
      /**
       * include geometry
       * @description by default, geometry will be ommited. set to true to include it (if available)
       * @default false
       */
      geometry?: boolean;
      /**
       * filter by level
       * @description if set, only items belonging to the level with this ID will be shown
       */
      level?: number | null;
    };
    /**
     * BuildingSchema
     * @description A non-outdoor part of the map.
     */
    Building: {
      /** ID */
      id: number;
      /**
       * level
       * @description level id this object belongs to.
       */
      level: number;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
    };
    /** PagedBuildingSchema */
    PagedBuilding: {
      /** Items */
      items: components["schemas"]["Building"][];
      /** Count */
      count: number;
    };
    /** SpaceFilters */
    SpaceFilters: {
      /**
       * include geometry
       * @description by default, geometry will be ommited. set to true to include it (if available)
       * @default false
       */
      geometry?: boolean;
      /**
       * filter by level
       * @description if set, only items belonging to the level with this ID will be shown
       */
      level?: number | null;
      /**
       * filter by location group
       * @description if set, only items belonging to the location group with this ID will be shown
       */
      group?: number | null;
    };
    /** PagedSpaceSchema */
    PagedSpace: {
      /** Items */
      items: components["schemas"]["Space"][];
      /** Count */
      count: number;
    };
    /**
     * SpaceSchema
     * @description An accessible area on a level. It can be outside-only or inside-only.
     *
     * A space is a specific location, and can therefore be routed to and from, as well as belong to location groups.
     */
    Space: {
      /** ID */
      id: number;
      /**
       * level
       * @description level id this object belongs to.
       */
      level: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
      /**
       * outside only
       * @description determines whether to truncate to buildings or to the outside of buildings
       */
      outside: boolean;
      /**
       * ceiling height
       * @description if not set, default height for this level will be used
       */
      height: number | null;
    };
    /**
     * DoorSchema
     * @description A link between two spaces
     */
    Door: {
      /** ID */
      id: number;
      /**
       * level
       * @description level id this object belongs to.
       */
      level: number;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
    };
    /** PagedDoorSchema */
    PagedDoor: {
      /** Items */
      items: components["schemas"]["Door"][];
      /** Count */
      count: number;
    };
    /** SpaceGeometryFilter */
    SpaceGeometryFilter: {
      /**
       * include geometry
       * @description by default, geometry will be ommited. set to true to include it (if available)
       * @default false
       */
      geometry?: boolean;
      /**
       * filter by space
       * @description if set, only items belonging to the space with this ID will be shown
       */
      space?: number | null;
    };
    /**
     * HoleSchema
     * @description A hole in a space, showing the levels below
     */
    Hole: {
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
    };
    /** PagedHoleSchema */
    PagedHole: {
      /** Items */
      items: components["schemas"]["Hole"][];
      /** Count */
      count: number;
    };
    /** AreaFilters */
    AreaFilters: {
      /**
       * include geometry
       * @description by default, geometry will be ommited. set to true to include it (if available)
       * @default false
       */
      geometry?: boolean;
      /**
       * filter by space
       * @description if set, only items belonging to the space with this ID will be shown
       */
      space?: number | null;
      /**
       * filter by location group
       * @description if set, only items belonging to the location group with this ID will be shown
       */
      group?: number | null;
    };
    /**
     * AreaSchema
     * @description An area inside a space.
     *
     * An area is a specific location, and can therefore be routed to and from, as well as belong to location groups.
     */
    Area: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
      /**
       * slow-down factor
       * @description how much walking in this area is slowed down, overlapping areas are multiplied
       */
      slow_down_factor: number;
    };
    /** PagedAreaSchema */
    PagedArea: {
      /** Items */
      items: components["schemas"]["Area"][];
      /** Count */
      count: number;
    };
    /** PagedStairSchema */
    PagedStair: {
      /** Items */
      items: components["schemas"]["Stair"][];
      /** Count */
      count: number;
    };
    /**
     * StairSchema
     * @description A line sharply dividing the accessible surface of a space into two different altitudes.
     */
    Stair: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["LineString"] | null;
    };
    /** PagedRampSchema */
    PagedRamp: {
      /** Items */
      items: components["schemas"]["Ramp"][];
      /** Count */
      count: number;
    };
    /**
     * RampSchema
     * @description An area in which the surface has an altitude gradient.
     */
    Ramp: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
    };
    /**
     * ObstacleSchema
     * @description An obstacle to be subtracted from the accessible surface of a space.
     */
    Obstacle: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * height
       * @description size of the obstacle in the z dimension
       */
      height: number;
      /**
       * altitude above ground
       * @description altitude above ground
       */
      altitude: number;
      /**
       * color
       * @description an optional color for this obstacle
       */
      color: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
    };
    /** PagedObstacleSchema */
    PagedObstacle: {
      /** Items */
      items: components["schemas"]["Obstacle"][];
      /** Count */
      count: number;
    };
    /**
     * LineObstacleSchema
     * @description An obstacle to be subtracted from the accessible surface of a space, defined as a line with width.
     */
    LineObstacle: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * height
       * @description size of the obstacle in the z dimension
       */
      height: number;
      /**
       * altitude above ground
       * @description altitude above ground
       */
      altitude: number;
      /**
       * color
       * @description an optional color for this obstacle
       */
      color: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["LineString"] | null;
      /**
       * width
       * @description width of the line
       */
      width: number;
    };
    /** PagedLineObstacleSchema */
    PagedLineObstacle: {
      /** Items */
      items: components["schemas"]["LineObstacle"][];
      /** Count */
      count: number;
    };
    /**
     * ColumnSchema
     * @description A ceiling-high obstacle subtracted from the space, effectively creating a "building" again.
     */
    Column: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Polygon"] | null;
    };
    /** PagedColumnSchema */
    PagedColumn: {
      /** Items */
      items: components["schemas"]["Column"][];
      /** Count */
      count: number;
    };
    /**
     * POISchema
     * @description A point of interest inside a space.
     *
     * A POI is a specific location, and can therefore be routed to and from, as well as belong to location groups.
     */
    POI: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
      /**
       * geometry
       * @description can be null if not available or excluded from endpoint
       */
      geometry?: components["schemas"]["Point"] | null;
    };
    /** PagedPOISchema */
    PagedPOI: {
      /** Items */
      items: components["schemas"]["POI"][];
      /** Count */
      count: number;
    };
    /**
     * LeaveDescriptionSchema
     * @description A description for leaving a space to enter another space.
     */
    LeaveDescription: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * target space
       * @description the space that is being entered
       */
      target_space: number;
      /**
       * description (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Stanley ging durch die rote Tür.",
       *   "en": "Stanley walked through the red door."
       * }
       */
      descriptions: {
        [key: string]: string;
      };
      /**
       * description (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      description: string;
    };
    /** PagedLeaveDescriptionSchema */
    PagedLeaveDescription: {
      /** Items */
      items: components["schemas"]["LeaveDescription"][];
      /** Count */
      count: number;
    };
    /**
     * CrossDescriptionSchema
     * @description A description for crossing through a space from one space to another.
     */
    CrossDescription: {
      /** ID */
      id: number;
      /**
       * space
       * @description space id this object belongs to.
       */
      space: number;
      /**
       * origin space
       * @description the space from which the main space is being entered
       */
      origin_space: number;
      /**
       * target space
       * @description the space that is being entered from the main space
       */
      target_space: number;
      /**
       * description (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "gehe geradeaus durch die Glastüren.",
       *   "en": "Go straight ahead through the big glass doors."
       * }
       */
      descriptions: {
        [key: string]: string;
      };
      /**
       * description (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      description: string;
    };
    /** PagedCrossDescriptionSchema */
    PagedCrossDescription: {
      /** Items */
      items: components["schemas"]["CrossDescription"][];
      /** Count */
      count: number;
    };
    /** ByCategoryFilter */
    ByCategoryFilter: {
      /**
       * filter by location group category
       * @description if set, only groups belonging to the location group category with this ID will be shown
       */
      category?: number | null;
    };
    /**
     * LocationGroupSchema
     * @description A location group, always belonging to a location group category.
     *
     * A location group is a (non-specific) location, which means it can be routed to and from.
     */
    LocationGroup: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * category
       * @description location group category that this location group belongs to
       */
      category: number;
      /** Priority */
      priority: number;
      /** Hierarchy */
      hierarchy: number;
      /**
       * label settings
       * @description for locations with this group, can be overwritten by specific locations
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * report missing locations
       * @description can be used in form for reporting missing locations
       */
      can_report_missing: boolean;
      /**
       * color
       * @description an optional color for spaces and areas with this group
       */
      color: string | null;
    };
    /** PagedLocationGroupSchema */
    PagedLocationGroup: {
      /** Items */
      items: components["schemas"]["LocationGroup"][];
      /** Count */
      count: number;
    };
    /**
     * LocationGroupCategorySchema
     * @description A location group category can hold either one or multiple location groups.
     *
     * It is used to allow for having different kind of groups for different means.
     */
    LocationGroupCategory: {
      /** ID */
      id: number;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /**
       * name/slug
       * @description name/slug of this location group category
       */
      name: string;
      /**
       * single choice
       * @description if true, every location can only have one group from this category, not a list
       */
      single: boolean;
      /**
       * plural title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles_plural: {
        [key: string]: string;
      };
      /**
       * plural title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title_plural: string;
      /**
       * help text (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      help_texts: {
        [key: string]: string;
      };
      /**
       * help text (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      help_text: string;
      /**
       * Allow Levels
       * @description whether groups with this category can be assigned to levels
       */
      allow_levels: boolean;
      /**
       * Allow Spaces
       * @description whether groups with this category can be assigned to spaces
       */
      allow_spaces: boolean;
      /**
       * Allow Areas
       * @description whether groups with this category can be assigned to areas
       */
      allow_areas: boolean;
      /**
       * Allow Pois
       * @description whether groups with this category can be assigned to POIs
       */
      allow_pois: boolean;
      /**
       * Allow Dynamic Locations
       * @description whether groups with this category can be assigned to dynamic locations
       */
      allow_dynamic_locations: boolean;
      /** Priority */
      priority: number;
    };
    /** PagedLocationGroupCategorySchema */
    PagedLocationGroupCategory: {
      /** Items */
      items: components["schemas"]["LocationGroupCategory"][];
      /** Count */
      count: number;
    };
    /** PagedSourceSchema */
    PagedSource: {
      /** Items */
      items: components["schemas"]["Source"][];
      /** Count */
      count: number;
    };
    /**
     * SourceSchema
     * @description A source image that can be traced in the editor.
     */
    Source: {
      /** ID */
      id: number;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * name
       * @description name/filename of the source
       */
      name: string;
      /** Bottom */
      bottom: number;
      /** Left */
      left: number;
      /** Top */
      top: number;
      /** Right */
      right: number;
    };
    /**
     * AccessRestrictionSchema
     * @description A category that some objects can belong to.
     *
     * If they do, you can only see them if you have a permission to see objects with this access retriction.
     */
    AccessRestriction: {
      /** ID */
      id: number;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** Open */
      open: boolean;
      /** access restriction groups */
      groups: number[];
    };
    /** PagedAccessRestrictionSchema */
    PagedAccessRestriction: {
      /** Items */
      items: components["schemas"]["AccessRestriction"][];
      /** Count */
      count: number;
    };
    /**
     * AccessRestrictionGroupSchema
     * @description For simplicity's sake, access restrictions can belong to groups, and you can grant permissions for the entire group.
     */
    AccessRestrictionGroup: {
      /** ID */
      id: number;
      /** access restriction ID */
      access_restriction?: number | null;
    };
    /** PagedAccessRestrictionGroupSchema */
    PagedAccessRestrictionGroup: {
      /** Items */
      items: components["schemas"]["AccessRestrictionGroup"][];
      /** Count */
      count: number;
    };
    /**
     * DynamicLocationSchema
     * @description A dynamic location represents a moving object. Its position has to be separately queries through the position API.
     *
     * A dynamic location is a specific location, and can therefore be routed to and from,
     * as well as belong to location groups.
     */
    DynamicLocation: {
      /** ID */
      id: number;
      /**
       * location slug
       * @description a slug is a unique way to refer to a location across all location types. locations can have a human-readable slug. if it doesn't, this field holds a slug generated based from the location type and ID. this slug will work even if a human-readable slug is defined later. even dynamic locations like coordinates have a slug.
       */
      slug: string;
      /**
       * title (all languages)
       * @description property names are the ISO-language code. languages may be missing.
       * @example {
       *   "de": "Titel",
       *   "en": "Title"
       * }
       */
      titles: {
        [key: string]: string;
      };
      /**
       * title (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      title: string;
      /** access restriction ID */
      access_restriction?: number | null;
      /**
       * subtitle (preferred language)
       * @description an automatically generated short description for this location. preferred language based on the Accept-Language header.
       */
      subtitle: string;
      /**
       * icon name
       * @description any material design icon name
       */
      icon?: string | null;
      /** can be searched */
      can_search: boolean;
      /** can describe locations */
      can_describe: boolean;
      /**
       * grid square
       * @description if a grid is defined and this location is within it
       */
      grid_square?: string | null;
      /**
       * location groups
       * @description grouped by location group categories. property names are the names of location groupes. property values are integer, None or a list of integers, see example.see location group category endpoint for currently available possibilities.categories may be missing if no groups apply.
       * @example {
       *   "category_with_single_true": 5,
       *   "categoryother_category_with_single_false": [
       *     1,
       *     3,
       *     7
       *   ],
       *   "other_category_with_single_true": null
       * }
       */
      groups: {
        [key: string]: number[] | number | null;
      };
      /**
       * label settings
       * @description if not set, it may be taken from location groups
       */
      label_settings?: components["schemas"]["LabelSettings"] | null;
      /**
       * label override (preferred language)
       * @description preferred language based on the Accept-Language header.
       */
      label_override?: string | null;
    };
    /** PagedDynamicLocationSchema */
    PagedDynamicLocation: {
      /** Items */
      items: components["schemas"]["DynamicLocation"][];
      /** Count */
      count: number;
    };
    /**
     * FirmwareSchema
     * @description A firmware version, usually with multiple build variants.
     */
    Firmware: {
      /** Id */
      id: number;
      /**
       * Project Name
       * @example c3nav_positioning
       */
      project_name: string;
      /**
       * Version
       * @example 499837d-dirty
       */
      version: string;
      /**
       * Idf Version
       * @example v5.1-476-g3187b8b326
       */
      idf_version: string;
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /** Builds */
      builds: components["schemas"]["FirmwareBuild"][];
    };
    /**
     * FirmwareBuildSchema
     * @description A build belonging to a firmware version.
     */
    FirmwareBuild: {
      /** Id */
      id: number;
      /**
       * Variant
       * @description a variant identifier for this build, unique for this firmware version
       * @example c3uart
       */
      variant: string;
      /**
       * Chip
       * @description the chip that this build was built for
       * @example ESP32_C3
       * @enum {string}
       */
      chip: "ESP32_S2" | "ESP32_C3";
      /**
       * Sha256 Hash
       * @description SHE256 hash of the underlying ELF file
       */
      sha256_hash: string;
      /**
       * Url
       * @description download URL for the build binary
       * @example /media/firmware/012345/firmware.bin
       */
      url: string;
      /**
       * Boards
       * @description set of boards that this build is compatible with
       * @example [
       *   "C3NAV_LOCATION_PCB_REV_0_2"
       * ]
       */
      boards: ("CUSTOM" | "ESP32_C3_DEVKIT_M_1" | "ESP32_C3_32S" | "C3NAV_UWB_BOARD" | "C3NAV_LOCATION_PCB_REV_0_1" | "C3NAV_LOCATION_PCB_REV_0_2")[];
    };
    /** PagedFirmwareSchema */
    PagedFirmware: {
      /** Items */
      items: components["schemas"]["Firmware"][];
      /** Count */
      count: number;
    };
    /** FirmwareAppDescriptionSchema */
    FirmwareAppDescription: {
      /** Magic Word */
      magic_word: number;
      /** Secure Version */
      secure_version: number;
      /** Reserv1 */
      reserv1: number[];
      /** Version */
      version: string;
      /** Project Name */
      project_name: string;
      /** Compile Time */
      compile_time: string;
      /** Compile Date */
      compile_date: string;
      /** Idf Version */
      idf_version: string;
      /** App Elf Sha256 */
      app_elf_sha256: string;
      /** Reserv2 */
      reserv2: number[];
    };
    /** FirmwareImageSchema */
    FirmwareImage: {
      header: components["schemas"]["FirmwareImageFileHeader"];
      ext_header: components["schemas"]["FirmwareImageExtendedFileHeader"];
      /** First Segment Headers */
      first_segment_headers: [number, number];
      app_desc: components["schemas"]["FirmwareAppDescription"];
    };
    /** FirmwareImageExtendedFileHeaderSchema */
    FirmwareImageExtendedFileHeader: {
      /** Wp Pin */
      wp_pin: number;
      /** Drive Settings */
      drive_settings: number;
      /**
       * Chip
       * @enum {string}
       */
      chip: "ESP32_S2" | "ESP32_C3";
      /** Min Chip Rev Old */
      min_chip_rev_old: number;
      /** Min Chip Rev */
      min_chip_rev: [number, number];
      /** Max Chip Rev */
      max_chip_rev: [number, number];
      /** Reserv */
      reserv: number;
      /** Hash Appended */
      hash_appended: boolean;
    };
    /** FirmwareImageFileHeaderSchema */
    FirmwareImageFileHeader: {
      /** Magic Word */
      magic_word: number;
      /** Num Segments */
      num_segments: number;
      /**
       * Spi Flash Mode
       * @enum {string}
       */
      spi_flash_mode: "QIO" | "QOUT" | "DIO" | "DOUT";
      flash_stuff: components["schemas"]["FlashSettings"];
      /** Entry Point */
      entry_point: number;
    };
    /** FlashSettings */
    FlashSettings: {
      /**
       * Size
       * @enum {string}
       */
      size: "SIZE_1MB" | "SIZE_2MB" | "SIZE_4MB" | "SIZE_8MB" | "SIZE_16MB" | "SIZE_32MB" | "SIZE_64MB" | "SIZE_128MB";
      /**
       * Frequency
       * @enum {string}
       */
      frequency: "FREQ_40MHZ" | "FREQ_26MHZ" | "FREQ_20MHZ" | "FREQ_80MHZ";
    };
    /**
     * UploadFirmwareSchema
     * @description A firmware version to upload, with at least one build variant
     */
    UploadFirmware: {
      /**
       * Project Name
       * @example c3nav_positioning
       */
      project_name: string;
      /**
       * Version
       * @example 499837d-dirty
       */
      version: string;
      /**
       * Idf Version
       * @example v5.1-476-g3187b8b326
       */
      idf_version: string;
      /** Builds */
      builds: components["schemas"]["UploadFirmwareBuild"][];
    };
    /**
     * UploadFirmwareBuildSchema
     * @description A firmware build to upload, with at least one build variant
     */
    UploadFirmwareBuild: {
      /**
       * Variant
       * @example c3uart
       */
      variant: string;
      /**
       * Boards
       * @example [
       *   "C3NAV_LOCATION_PCB_REV_0_2"
       * ]
       */
      boards: ("CUSTOM" | "ESP32_C3_DEVKIT_M_1" | "ESP32_C3_32S" | "C3NAV_UWB_BOARD" | "C3NAV_LOCATION_PCB_REV_0_1" | "C3NAV_LOCATION_PCB_REV_0_2")[];
      /** project_description.json contents */
      project_description: Record<string, never>;
      /**
       * Uploaded Filename
       * @example firmware.bin
       */
      uploaded_filename: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get session API token */
  c3nav_auth_session_token: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["APIToken"];
        };
      };
    };
  };
  /** Get map boundaries */
  c3nav_map_bounds: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Bounds"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get locations (with most important attributes) */
  c3nav_map_location_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description only show locations that should show up in search */
        searchable?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["SlimLevelLocation"] | components["schemas"]["SlimSpaceLocation"] | components["schemas"]["SlimAreaLocation"] | components["schemas"]["SlimPOILocation"] | components["schemas"]["SlimLocationGroupLocation"] | components["schemas"]["SlimDynamicLocationLocation"])[];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get locations (with all attributes) */
  c3nav_map_location_list_full: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description only show locations that should show up in search */
        searchable?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["FullLevelLocation"] | components["schemas"]["FullSpaceLocation"] | components["schemas"]["FullAreaLocation"] | components["schemas"]["FullPOILocation"] | components["schemas"]["FullLocationGroupLocation"] | components["schemas"]["FullDynamicLocationLocation"])[];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get location by ID (with most important attributes)
   * @description a numeric ID for a map location or a string ID for generated locations can be used
   */
  c3nav_map_location_by_id: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description whether to show redirects instead of sending a redirect response */
        show_redirects?: boolean;
      };
      path: {
        location_id: number | string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SlimLevelLocation"] | components["schemas"]["SlimSpaceLocation"] | components["schemas"]["SlimAreaLocation"] | components["schemas"]["SlimPOILocation"] | components["schemas"]["SlimLocationGroupLocation"] | components["schemas"]["SlimDynamicLocationLocation"] | components["schemas"]["CustomLocationLocation"] | components["schemas"]["TrackablePositionLocation"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get location by ID (with all attributes)
   * @description a numeric ID for a map location or a string ID for generated locations can be used
   */
  c3nav_map_location_by_id_full: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description whether to show redirects instead of sending a redirect response */
        show_redirects?: boolean;
      };
      path: {
        location_id: number | string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FullLevelLocation"] | components["schemas"]["FullSpaceLocation"] | components["schemas"]["FullAreaLocation"] | components["schemas"]["FullPOILocation"] | components["schemas"]["FullLocationGroupLocation"] | components["schemas"]["FullDynamicLocationLocation"] | components["schemas"]["CustomLocationLocation"] | components["schemas"]["TrackablePositionLocation"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get location display data by ID
   * @description a numeric ID for a map location or a string ID for generated locations can be used
   */
  c3nav_map_location_by_id_display: {
    parameters: {
      path: {
        location_id: number | string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LocationDisplay"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get location geometry (if available) by ID
   * @description a numeric ID for a map location or a string ID for generated locations can be used
   */
  c3nav_map_location_by_id_geometry: {
    parameters: {
      path: {
        location_id: number | string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LocationGeometry"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get location by slug (with most important attributes) */
  c3nav_map_location_by_slug: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description whether to show redirects instead of sending a redirect response */
        show_redirects?: boolean;
      };
      path: {
        location_slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SlimLevelLocation"] | components["schemas"]["SlimSpaceLocation"] | components["schemas"]["SlimAreaLocation"] | components["schemas"]["SlimPOILocation"] | components["schemas"]["SlimLocationGroupLocation"] | components["schemas"]["SlimDynamicLocationLocation"] | components["schemas"]["CustomLocationLocation"] | components["schemas"]["TrackablePositionLocation"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get location by slug (with all attributes) */
  c3nav_map_location_by_slug_full: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description whether to show redirects instead of sending a redirect response */
        show_redirects?: boolean;
      };
      path: {
        location_slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FullLevelLocation"] | components["schemas"]["FullSpaceLocation"] | components["schemas"]["FullAreaLocation"] | components["schemas"]["FullPOILocation"] | components["schemas"]["FullLocationGroupLocation"] | components["schemas"]["FullDynamicLocationLocation"] | components["schemas"]["CustomLocationLocation"] | components["schemas"]["TrackablePositionLocation"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get location display data by slug */
  c3nav_map_location_by_slug_display: {
    parameters: {
      path: {
        location_slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LocationDisplay"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get location geometry (if available) by slug */
  c3nav_map_location_by_slug_geometry: {
    parameters: {
      path: {
        location_slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LocationGeometry"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** a numeric ID for a dynamic location or a string ID for the position secret can be used */
  c3nav_map_get_current_position_by_id: {
    parameters: {
      path: {
        position_id: number | string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PositionUnavailableStatus"] | components["schemas"]["PositionAvailableStatus"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get level list */
  c3nav_mapdata_level_list: {
    parameters: {
      query?: {
        /** @description if set, only levels on top of the level with this ID (or "null" for no level) will be shown */
        on_top_of?: "null" | number | null;
        /** @description if set, only items belonging to the location group with this ID will be shown */
        group?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedLevel"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get level by ID */
  c3nav_mapdata_level_by_id: {
    parameters: {
      path: {
        level_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Level"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get building list */
  c3nav_mapdata_building_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the level with this ID will be shown */
        level?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedBuilding"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get building by ID */
  c3nav_mapdata_building_by_id: {
    parameters: {
      path: {
        building_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Building"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get space list */
  c3nav_mapdata_space_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the level with this ID will be shown */
        level?: number | null;
        /** @description if set, only items belonging to the location group with this ID will be shown */
        group?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedSpace"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get space by ID */
  c3nav_mapdata_space_by_id: {
    parameters: {
      path: {
        space_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Space"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get door list */
  c3nav_mapdata_door_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the level with this ID will be shown */
        level?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedDoor"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get door by ID */
  c3nav_mapdata_door_by_id: {
    parameters: {
      path: {
        door_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Door"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get hole list */
  c3nav_mapdata_hole_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedHole"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get hole by ID */
  c3nav_mapdata_hole_by_id: {
    parameters: {
      path: {
        hole_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Hole"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get area list */
  c3nav_mapdata_area_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        /** @description if set, only items belonging to the location group with this ID will be shown */
        group?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedArea"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get area by ID */
  c3nav_mapdata_area_by_id: {
    parameters: {
      path: {
        area_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Area"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get stair list */
  c3nav_mapdata_stair_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedStair"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get stair by ID */
  c3nav_mapdata_stair_by_id: {
    parameters: {
      path: {
        stair_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Stair"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get ramp list */
  c3nav_mapdata_ramp_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedRamp"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get ramp by ID */
  c3nav_mapdata_ramp_by_id: {
    parameters: {
      path: {
        ramp_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ramp"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get obstacle list */
  c3nav_mapdata_obstacle_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedObstacle"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get obstacle by ID */
  c3nav_mapdata_obstacle_by_id: {
    parameters: {
      path: {
        obstacle_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Obstacle"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get line obstacle list */
  c3nav_mapdata_lineobstacle_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedLineObstacle"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get line obstacle by ID */
  c3nav_mapdata_lineobstacle_by_id: {
    parameters: {
      path: {
        lineobstacle_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LineObstacle"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get column list */
  c3nav_mapdata_column_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedColumn"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get column by ID */
  c3nav_mapdata_column_by_id: {
    parameters: {
      path: {
        column_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Column"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get POI list */
  c3nav_mapdata_poi_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedPOI"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get POI by ID */
  c3nav_mapdata_poi_by_id: {
    parameters: {
      path: {
        poi_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["POI"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get leave description list */
  c3nav_mapdata_leavedescription_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedLeaveDescription"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get leave description by ID */
  c3nav_mapdata_leavedescription_by_id: {
    parameters: {
      path: {
        leavedescription_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LeaveDescription"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get cross description list */
  c3nav_mapdata_crossdescription_list: {
    parameters: {
      query?: {
        /** @description by default, geometry will be ommited. set to true to include it (if available) */
        geometry?: boolean;
        /** @description if set, only items belonging to the space with this ID will be shown */
        space?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedCrossDescription"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get cross description by ID */
  c3nav_mapdata_crossdescription_by_id: {
    parameters: {
      path: {
        crossdescription_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CrossDescription"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get location group list */
  c3nav_mapdata_locationgroup_list: {
    parameters: {
      query?: {
        /** @description if set, only groups belonging to the location group category with this ID will be shown */
        category?: number | null;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedLocationGroup"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get location group by ID */
  c3nav_mapdata_locationgroup_by_id: {
    parameters: {
      path: {
        locationgroup_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LocationGroup"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get location group category list */
  c3nav_mapdata_locationgroupcategory_list: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedLocationGroupCategory"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get location group category by ID */
  c3nav_mapdata_locationgroupcategory_by_id: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LocationGroupCategory"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get source list */
  c3nav_mapdata_source_list: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedSource"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get source by ID */
  c3nav_mapdata_source_by_id: {
    parameters: {
      path: {
        source_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Source"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get access restriction list */
  c3nav_mapdata_accessrestriction_list: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedAccessRestriction"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get access restriction by ID */
  c3nav_mapdata_accessrestriction_by_id: {
    parameters: {
      path: {
        accessrestriction_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccessRestriction"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get access restriction group list */
  c3nav_mapdata_accessrestrictiongroup_list: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedAccessRestrictionGroup"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get access restriction group by ID */
  c3nav_mapdata_accessrestrictiongroups_by_id: {
    parameters: {
      path: {
        group_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccessRestrictionGroup"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get dynamic location list */
  c3nav_mapdata_dynamiclocation_list: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedDynamicLocation"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get dynamic location by ID */
  c3nav_mapdata_dynamiclocation_by_id: {
    parameters: {
      path: {
        dynamiclocation_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicLocation"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** List available firmwares */
  c3nav_mesh_firmware_list: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedFirmware"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get specific firmware */
  c3nav_mesh_firmware_by_id: {
    parameters: {
      path: {
        firmware_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Firmware"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get header data of firmware build image */
  c3nav_mesh_firmware_build_image: {
    parameters: {
      path: {
        firmware_id: number;
        variant: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FirmwareImage"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /** Get project description of firmware build */
  c3nav_mesh_firmware_project_description: {
    parameters: {
      path: {
        firmware_id: number;
        variant: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Upload firmware
   * @description your OpenAPI viewer might not show it: firmware_data is UploadFirmware as json
   */
  c3nav_mesh_firmware_upload: {
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Binary Files */
          binary_files: string[];
          firmware_data: components["schemas"]["UploadFirmware"];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Firmware"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
}
